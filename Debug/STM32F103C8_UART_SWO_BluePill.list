
STM32F103C8_UART_SWO_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000070  08002d50  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e4  08002d50  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b33b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a95  00000000  00000000  0002b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000658  00000000  00000000  0002ce70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000035d7  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000208a  00000000  00000000  0003103f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000330c9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001fd0  00000000  00000000  00033148  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000084  00000000  00000000  00035118  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000117  00000000  00000000  0003519c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002be0 	.word	0x08002be0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002be0 	.word	0x08002be0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f93f 	bl	80003e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fca2 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f957 	bl	800044a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f91f 	bl	80003f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000009c 	.word	0x2000009c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000009c 	.word	0x2000009c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	095b      	lsrs	r3, r3, #5
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	f002 021f 	and.w	r2, r2, #31
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	490d      	ldr	r1, [pc, #52]	; (8000334 <NVIC_SetPriority+0x4c>)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 030f 	and.w	r3, r3, #15
 8000304:	3b04      	subs	r3, #4
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	4908      	ldr	r1, [pc, #32]	; (8000338 <NVIC_SetPriority+0x50>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	2201      	movs	r2, #1
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	1e5a      	subs	r2, r3, #1
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	401a      	ands	r2, r3
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000382:	2101      	movs	r1, #1
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	1e59      	subs	r1, r3, #1
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	4313      	orrs	r3, r2
         );
}
 8000392:	4618      	mov	r0, r3
 8000394:	3724      	adds	r7, #36	; 0x24
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003ac:	d301      	bcc.n	80003b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ae:	2301      	movs	r3, #1
 80003b0:	e00f      	b.n	80003d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <SysTick_Config+0x40>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ba:	210f      	movs	r1, #15
 80003bc:	f04f 30ff 	mov.w	r0, #4294967295
 80003c0:	f7ff ff92 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <SysTick_Config+0x40>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SysTick_Config+0x40>)
 80003cc:	2207      	movs	r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	e000e010 	.word	0xe000e010

080003e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff ff33 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
 8000402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000408:	f7ff ff48 	bl	800029c <NVIC_GetPriorityGrouping>
 800040c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	68b9      	ldr	r1, [r7, #8]
 8000412:	6978      	ldr	r0, [r7, #20]
 8000414:	f7ff ff92 	bl	800033c <NVIC_EncodePriority>
 8000418:	4602      	mov	r2, r0
 800041a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff61 	bl	80002e8 <NVIC_SetPriority>
}
 8000426:	bf00      	nop
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff3b 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ffa2 	bl	800039c <SysTick_Config>
 8000458:	4603      	mov	r3, r0
}
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d106      	bne.n	8000480 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000472:	4a09      	ldr	r2, [pc, #36]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800047e:	e005      	b.n	800048c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 0304 	bic.w	r3, r3, #4
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000e010 	.word	0xe000e010

0800049c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004a0:	f000 f802 	bl	80004a8 <HAL_SYSTICK_Callback>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004bc:	2300      	movs	r3, #0
 80004be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d005      	beq.n	80004d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2204      	movs	r2, #4
 80004ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004d0:	2301      	movs	r3, #1
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e057      	b.n	8000586 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	f022 020e 	bic.w	r2, r2, #14
 80004e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	f022 0201 	bic.w	r2, r2, #1
 80004f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004f6:	4a26      	ldr	r2, [pc, #152]	; (8000590 <HAL_DMA_Abort_IT+0xdc>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4b25      	ldr	r3, [pc, #148]	; (8000594 <HAL_DMA_Abort_IT+0xe0>)
 8000500:	4299      	cmp	r1, r3
 8000502:	d02e      	beq.n	8000562 <HAL_DMA_Abort_IT+0xae>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <HAL_DMA_Abort_IT+0xe4>)
 800050c:	4299      	cmp	r1, r3
 800050e:	d026      	beq.n	800055e <HAL_DMA_Abort_IT+0xaa>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <HAL_DMA_Abort_IT+0xe8>)
 8000518:	4299      	cmp	r1, r3
 800051a:	d01d      	beq.n	8000558 <HAL_DMA_Abort_IT+0xa4>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <HAL_DMA_Abort_IT+0xec>)
 8000524:	4299      	cmp	r1, r3
 8000526:	d014      	beq.n	8000552 <HAL_DMA_Abort_IT+0x9e>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <HAL_DMA_Abort_IT+0xf0>)
 8000530:	4299      	cmp	r1, r3
 8000532:	d00b      	beq.n	800054c <HAL_DMA_Abort_IT+0x98>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_DMA_Abort_IT+0xf4>)
 800053c:	4299      	cmp	r1, r3
 800053e:	d102      	bne.n	8000546 <HAL_DMA_Abort_IT+0x92>
 8000540:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000544:	e00e      	b.n	8000564 <HAL_DMA_Abort_IT+0xb0>
 8000546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800054a:	e00b      	b.n	8000564 <HAL_DMA_Abort_IT+0xb0>
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	e008      	b.n	8000564 <HAL_DMA_Abort_IT+0xb0>
 8000552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000556:	e005      	b.n	8000564 <HAL_DMA_Abort_IT+0xb0>
 8000558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055c:	e002      	b.n	8000564 <HAL_DMA_Abort_IT+0xb0>
 800055e:	2310      	movs	r3, #16
 8000560:	e000      	b.n	8000564 <HAL_DMA_Abort_IT+0xb0>
 8000562:	2301      	movs	r3, #1
 8000564:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2201      	movs	r2, #1
 800056a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057a:	2b00      	cmp	r3, #0
 800057c:	d003      	beq.n	8000586 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	4798      	blx	r3
    } 
  }
  return status;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020000 	.word	0x40020000
 8000594:	40020008 	.word	0x40020008
 8000598:	4002001c 	.word	0x4002001c
 800059c:	40020030 	.word	0x40020030
 80005a0:	40020044 	.word	0x40020044
 80005a4:	40020058 	.word	0x40020058
 80005a8:	4002006c 	.word	0x4002006c

080005ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b08b      	sub	sp, #44	; 0x2c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
 80005ce:	e127      	b.n	8000820 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80005d0:	2201      	movs	r2, #1
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	4013      	ands	r3, r2
 80005e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80005e4:	69ba      	ldr	r2, [r7, #24]
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	f040 8116 	bne.w	800081a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	2b12      	cmp	r3, #18
 80005f4:	d034      	beq.n	8000660 <HAL_GPIO_Init+0xb4>
 80005f6:	2b12      	cmp	r3, #18
 80005f8:	d80d      	bhi.n	8000616 <HAL_GPIO_Init+0x6a>
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d02b      	beq.n	8000656 <HAL_GPIO_Init+0xaa>
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d804      	bhi.n	800060c <HAL_GPIO_Init+0x60>
 8000602:	2b00      	cmp	r3, #0
 8000604:	d031      	beq.n	800066a <HAL_GPIO_Init+0xbe>
 8000606:	2b01      	cmp	r3, #1
 8000608:	d01c      	beq.n	8000644 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800060a:	e048      	b.n	800069e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800060c:	2b03      	cmp	r3, #3
 800060e:	d043      	beq.n	8000698 <HAL_GPIO_Init+0xec>
 8000610:	2b11      	cmp	r3, #17
 8000612:	d01b      	beq.n	800064c <HAL_GPIO_Init+0xa0>
          break;
 8000614:	e043      	b.n	800069e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000616:	4a87      	ldr	r2, [pc, #540]	; (8000834 <HAL_GPIO_Init+0x288>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d026      	beq.n	800066a <HAL_GPIO_Init+0xbe>
 800061c:	4a85      	ldr	r2, [pc, #532]	; (8000834 <HAL_GPIO_Init+0x288>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d806      	bhi.n	8000630 <HAL_GPIO_Init+0x84>
 8000622:	4a85      	ldr	r2, [pc, #532]	; (8000838 <HAL_GPIO_Init+0x28c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d020      	beq.n	800066a <HAL_GPIO_Init+0xbe>
 8000628:	4a84      	ldr	r2, [pc, #528]	; (800083c <HAL_GPIO_Init+0x290>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d01d      	beq.n	800066a <HAL_GPIO_Init+0xbe>
          break;
 800062e:	e036      	b.n	800069e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000630:	4a83      	ldr	r2, [pc, #524]	; (8000840 <HAL_GPIO_Init+0x294>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d019      	beq.n	800066a <HAL_GPIO_Init+0xbe>
 8000636:	4a83      	ldr	r2, [pc, #524]	; (8000844 <HAL_GPIO_Init+0x298>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d016      	beq.n	800066a <HAL_GPIO_Init+0xbe>
 800063c:	4a82      	ldr	r2, [pc, #520]	; (8000848 <HAL_GPIO_Init+0x29c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d013      	beq.n	800066a <HAL_GPIO_Init+0xbe>
          break;
 8000642:	e02c      	b.n	800069e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	623b      	str	r3, [r7, #32]
          break;
 800064a:	e028      	b.n	800069e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	3304      	adds	r3, #4
 8000652:	623b      	str	r3, [r7, #32]
          break;
 8000654:	e023      	b.n	800069e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	3308      	adds	r3, #8
 800065c:	623b      	str	r3, [r7, #32]
          break;
 800065e:	e01e      	b.n	800069e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	330c      	adds	r3, #12
 8000666:	623b      	str	r3, [r7, #32]
          break;
 8000668:	e019      	b.n	800069e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d102      	bne.n	8000678 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000672:	2304      	movs	r3, #4
 8000674:	623b      	str	r3, [r7, #32]
          break;
 8000676:	e012      	b.n	800069e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d105      	bne.n	800068c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000680:	2308      	movs	r3, #8
 8000682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	69fa      	ldr	r2, [r7, #28]
 8000688:	611a      	str	r2, [r3, #16]
          break;
 800068a:	e008      	b.n	800069e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800068c:	2308      	movs	r3, #8
 800068e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	615a      	str	r2, [r3, #20]
          break;
 8000696:	e002      	b.n	800069e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
          break;
 800069c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	2bff      	cmp	r3, #255	; 0xff
 80006a2:	d801      	bhi.n	80006a8 <HAL_GPIO_Init+0xfc>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	e001      	b.n	80006ac <HAL_GPIO_Init+0x100>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3304      	adds	r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	2bff      	cmp	r3, #255	; 0xff
 80006b2:	d802      	bhi.n	80006ba <HAL_GPIO_Init+0x10e>
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	e002      	b.n	80006c0 <HAL_GPIO_Init+0x114>
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	3b08      	subs	r3, #8
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	210f      	movs	r1, #15
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	401a      	ands	r2, r3
 80006d2:	6a39      	ldr	r1, [r7, #32]
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	431a      	orrs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 8096 	beq.w	800081a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006ee:	4a57      	ldr	r2, [pc, #348]	; (800084c <HAL_GPIO_Init+0x2a0>)
 80006f0:	4b56      	ldr	r3, [pc, #344]	; (800084c <HAL_GPIO_Init+0x2a0>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <HAL_GPIO_Init+0x2a0>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000706:	4a52      	ldr	r2, [pc, #328]	; (8000850 <HAL_GPIO_Init+0x2a4>)
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	3302      	adds	r3, #2
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	220f      	movs	r2, #15
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	4013      	ands	r3, r2
 8000728:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a49      	ldr	r2, [pc, #292]	; (8000854 <HAL_GPIO_Init+0x2a8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d013      	beq.n	800075a <HAL_GPIO_Init+0x1ae>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a48      	ldr	r2, [pc, #288]	; (8000858 <HAL_GPIO_Init+0x2ac>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d00d      	beq.n	8000756 <HAL_GPIO_Init+0x1aa>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a47      	ldr	r2, [pc, #284]	; (800085c <HAL_GPIO_Init+0x2b0>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d007      	beq.n	8000752 <HAL_GPIO_Init+0x1a6>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a46      	ldr	r2, [pc, #280]	; (8000860 <HAL_GPIO_Init+0x2b4>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_GPIO_Init+0x1a2>
 800074a:	2303      	movs	r3, #3
 800074c:	e006      	b.n	800075c <HAL_GPIO_Init+0x1b0>
 800074e:	2304      	movs	r3, #4
 8000750:	e004      	b.n	800075c <HAL_GPIO_Init+0x1b0>
 8000752:	2302      	movs	r3, #2
 8000754:	e002      	b.n	800075c <HAL_GPIO_Init+0x1b0>
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <HAL_GPIO_Init+0x1b0>
 800075a:	2300      	movs	r3, #0
 800075c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075e:	f002 0203 	and.w	r2, r2, #3
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	4093      	lsls	r3, r2
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	4313      	orrs	r3, r2
 800076a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800076c:	4938      	ldr	r1, [pc, #224]	; (8000850 <HAL_GPIO_Init+0x2a4>)
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	089b      	lsrs	r3, r3, #2
 8000772:	3302      	adds	r3, #2
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000786:	4937      	ldr	r1, [pc, #220]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 8000788:	4b36      	ldr	r3, [pc, #216]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	4313      	orrs	r3, r2
 8000790:	600b      	str	r3, [r1, #0]
 8000792:	e006      	b.n	80007a2 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000794:	4933      	ldr	r1, [pc, #204]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	43db      	mvns	r3, r3
 800079e:	4013      	ands	r3, r2
 80007a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d006      	beq.n	80007bc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80007ae:	492d      	ldr	r1, [pc, #180]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	604b      	str	r3, [r1, #4]
 80007ba:	e006      	b.n	80007ca <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80007bc:	4929      	ldr	r1, [pc, #164]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4013      	ands	r3, r2
 80007c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80007d6:	4923      	ldr	r1, [pc, #140]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	4313      	orrs	r3, r2
 80007e0:	608b      	str	r3, [r1, #8]
 80007e2:	e006      	b.n	80007f2 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007e4:	491f      	ldr	r1, [pc, #124]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 80007e8:	689a      	ldr	r2, [r3, #8]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	43db      	mvns	r3, r3
 80007ee:	4013      	ands	r3, r2
 80007f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80007fe:	4919      	ldr	r1, [pc, #100]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	4313      	orrs	r3, r2
 8000808:	60cb      	str	r3, [r1, #12]
 800080a:	e006      	b.n	800081a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800080c:	4915      	ldr	r1, [pc, #84]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_GPIO_Init+0x2b8>)
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	43db      	mvns	r3, r3
 8000816:	4013      	ands	r3, r2
 8000818:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	3301      	adds	r3, #1
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000822:	2b0f      	cmp	r3, #15
 8000824:	f67f aed4 	bls.w	80005d0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000828:	bf00      	nop
 800082a:	372c      	adds	r7, #44	; 0x2c
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	10210000 	.word	0x10210000
 8000838:	10110000 	.word	0x10110000
 800083c:	10120000 	.word	0x10120000
 8000840:	10310000 	.word	0x10310000
 8000844:	10320000 	.word	0x10320000
 8000848:	10220000 	.word	0x10220000
 800084c:	40021000 	.word	0x40021000
 8000850:	40010000 	.word	0x40010000
 8000854:	40010800 	.word	0x40010800
 8000858:	40010c00 	.word	0x40010c00
 800085c:	40011000 	.word	0x40011000
 8000860:	40011400 	.word	0x40011400
 8000864:	40010400 	.word	0x40010400

08000868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
 8000874:	4613      	mov	r3, r2
 8000876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000878:	787b      	ldrb	r3, [r7, #1]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000884:	e003      	b.n	800088e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	041a      	lsls	r2, r3, #16
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	611a      	str	r2, [r3, #16]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68da      	ldr	r2, [r3, #12]
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	405a      	eors	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	60da      	str	r2, [r3, #12]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
	...

080008bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 8087 	beq.w	80009e4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008d6:	4b92      	ldr	r3, [pc, #584]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 030c 	and.w	r3, r3, #12
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d00c      	beq.n	80008fc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008e2:	4b8f      	ldr	r3, [pc, #572]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d112      	bne.n	8000914 <HAL_RCC_OscConfig+0x58>
 80008ee:	4b8c      	ldr	r3, [pc, #560]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fa:	d10b      	bne.n	8000914 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008fc:	4b88      	ldr	r3, [pc, #544]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d06c      	beq.n	80009e2 <HAL_RCC_OscConfig+0x126>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d168      	bne.n	80009e2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e22d      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800091c:	d106      	bne.n	800092c <HAL_RCC_OscConfig+0x70>
 800091e:	4a80      	ldr	r2, [pc, #512]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000920:	4b7f      	ldr	r3, [pc, #508]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e02e      	b.n	800098a <HAL_RCC_OscConfig+0xce>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10c      	bne.n	800094e <HAL_RCC_OscConfig+0x92>
 8000934:	4a7a      	ldr	r2, [pc, #488]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000936:	4b7a      	ldr	r3, [pc, #488]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4a77      	ldr	r2, [pc, #476]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000942:	4b77      	ldr	r3, [pc, #476]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	e01d      	b.n	800098a <HAL_RCC_OscConfig+0xce>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000956:	d10c      	bne.n	8000972 <HAL_RCC_OscConfig+0xb6>
 8000958:	4a71      	ldr	r2, [pc, #452]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 800095a:	4b71      	ldr	r3, [pc, #452]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4a6e      	ldr	r2, [pc, #440]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000966:	4b6e      	ldr	r3, [pc, #440]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e00b      	b.n	800098a <HAL_RCC_OscConfig+0xce>
 8000972:	4a6b      	ldr	r2, [pc, #428]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000974:	4b6a      	ldr	r3, [pc, #424]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	4a68      	ldr	r2, [pc, #416]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000980:	4b67      	ldr	r3, [pc, #412]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000988:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d013      	beq.n	80009ba <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000992:	f7ff fc33 	bl	80001fc <HAL_GetTick>
 8000996:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000998:	e008      	b.n	80009ac <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099a:	f7ff fc2f 	bl	80001fc <HAL_GetTick>
 800099e:	4602      	mov	r2, r0
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	2b64      	cmp	r3, #100	; 0x64
 80009a6:	d901      	bls.n	80009ac <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80009a8:	2303      	movs	r3, #3
 80009aa:	e1e1      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ac:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f0      	beq.n	800099a <HAL_RCC_OscConfig+0xde>
 80009b8:	e014      	b.n	80009e4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ba:	f7ff fc1f 	bl	80001fc <HAL_GetTick>
 80009be:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c0:	e008      	b.n	80009d4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009c2:	f7ff fc1b 	bl	80001fc <HAL_GetTick>
 80009c6:	4602      	mov	r2, r0
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	2b64      	cmp	r3, #100	; 0x64
 80009ce:	d901      	bls.n	80009d4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80009d0:	2303      	movs	r3, #3
 80009d2:	e1cd      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f0      	bne.n	80009c2 <HAL_RCC_OscConfig+0x106>
 80009e0:	e000      	b.n	80009e4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d063      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 030c 	and.w	r3, r3, #12
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d00b      	beq.n	8000a14 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009fc:	4b48      	ldr	r3, [pc, #288]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 030c 	and.w	r3, r3, #12
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d11c      	bne.n	8000a42 <HAL_RCC_OscConfig+0x186>
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d116      	bne.n	8000a42 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a14:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <HAL_RCC_OscConfig+0x170>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d001      	beq.n	8000a2c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e1a1      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2c:	493c      	ldr	r1, [pc, #240]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a40:	e03a      	b.n	8000ab8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d020      	beq.n	8000a8c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a4a:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <HAL_RCC_OscConfig+0x268>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a50:	f7ff fbd4 	bl	80001fc <HAL_GetTick>
 8000a54:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a56:	e008      	b.n	8000a6a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a58:	f7ff fbd0 	bl	80001fc <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d901      	bls.n	8000a6a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	e182      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f0      	beq.n	8000a58 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a76:	492a      	ldr	r1, [pc, #168]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	600b      	str	r3, [r1, #0]
 8000a8a:	e015      	b.n	8000ab8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_RCC_OscConfig+0x268>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a92:	f7ff fbb3 	bl	80001fc <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a98:	e008      	b.n	8000aac <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fbaf 	bl	80001fc <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d901      	bls.n	8000aac <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e161      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f0      	bne.n	8000a9a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d039      	beq.n	8000b38 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d019      	beq.n	8000b00 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_RCC_OscConfig+0x26c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad2:	f7ff fb93 	bl	80001fc <HAL_GetTick>
 8000ad6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ad8:	e008      	b.n	8000aec <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ada:	f7ff fb8f 	bl	80001fc <HAL_GetTick>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d901      	bls.n	8000aec <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e141      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_RCC_OscConfig+0x264>)
 8000aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f0      	beq.n	8000ada <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 facb 	bl	8001094 <RCC_Delay>
 8000afe:	e01b      	b.n	8000b38 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_RCC_OscConfig+0x26c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fb79 	bl	80001fc <HAL_GetTick>
 8000b0a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b0c:	e00e      	b.n	8000b2c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b0e:	f7ff fb75 	bl	80001fc <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d907      	bls.n	8000b2c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e127      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
 8000b20:	40021000 	.word	0x40021000
 8000b24:	42420000 	.word	0x42420000
 8000b28:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b2c:	4b92      	ldr	r3, [pc, #584]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1ea      	bne.n	8000b0e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f000 80a6 	beq.w	8000c92 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b4a:	4b8b      	ldr	r3, [pc, #556]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10d      	bne.n	8000b72 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4a88      	ldr	r2, [pc, #544]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000b58:	4b87      	ldr	r3, [pc, #540]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b85      	ldr	r3, [pc, #532]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b72:	4b82      	ldr	r3, [pc, #520]	; (8000d7c <HAL_RCC_OscConfig+0x4c0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d118      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b7e:	4a7f      	ldr	r2, [pc, #508]	; (8000d7c <HAL_RCC_OscConfig+0x4c0>)
 8000b80:	4b7e      	ldr	r3, [pc, #504]	; (8000d7c <HAL_RCC_OscConfig+0x4c0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fb37 	bl	80001fc <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b92:	f7ff fb33 	bl	80001fc <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b64      	cmp	r3, #100	; 0x64
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e0e5      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ba4:	4b75      	ldr	r3, [pc, #468]	; (8000d7c <HAL_RCC_OscConfig+0x4c0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f0      	beq.n	8000b92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d106      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x30a>
 8000bb8:	4a6f      	ldr	r2, [pc, #444]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bba:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6213      	str	r3, [r2, #32]
 8000bc4:	e02d      	b.n	8000c22 <HAL_RCC_OscConfig+0x366>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x32c>
 8000bce:	4a6a      	ldr	r2, [pc, #424]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bd0:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	f023 0301 	bic.w	r3, r3, #1
 8000bd8:	6213      	str	r3, [r2, #32]
 8000bda:	4a67      	ldr	r2, [pc, #412]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bdc:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	f023 0304 	bic.w	r3, r3, #4
 8000be4:	6213      	str	r3, [r2, #32]
 8000be6:	e01c      	b.n	8000c22 <HAL_RCC_OscConfig+0x366>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d10c      	bne.n	8000c0a <HAL_RCC_OscConfig+0x34e>
 8000bf0:	4a61      	ldr	r2, [pc, #388]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bf2:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6213      	str	r3, [r2, #32]
 8000bfc:	4a5e      	ldr	r2, [pc, #376]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000bfe:	4b5e      	ldr	r3, [pc, #376]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6213      	str	r3, [r2, #32]
 8000c08:	e00b      	b.n	8000c22 <HAL_RCC_OscConfig+0x366>
 8000c0a:	4a5b      	ldr	r2, [pc, #364]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	6213      	str	r3, [r2, #32]
 8000c16:	4a58      	ldr	r2, [pc, #352]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	f023 0304 	bic.w	r3, r3, #4
 8000c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d015      	beq.n	8000c56 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2a:	f7ff fae7 	bl	80001fc <HAL_GetTick>
 8000c2e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c30:	e00a      	b.n	8000c48 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c32:	f7ff fae3 	bl	80001fc <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e093      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0ee      	beq.n	8000c32 <HAL_RCC_OscConfig+0x376>
 8000c54:	e014      	b.n	8000c80 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c56:	f7ff fad1 	bl	80001fc <HAL_GetTick>
 8000c5a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c5c:	e00a      	b.n	8000c74 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c5e:	f7ff facd 	bl	80001fc <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e07d      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1ee      	bne.n	8000c5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d105      	bne.n	8000c92 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c86:	4a3c      	ldr	r2, [pc, #240]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d069      	beq.n	8000d6e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d061      	beq.n	8000d6a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d146      	bne.n	8000d3c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <HAL_RCC_OscConfig+0x4c4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff faa2 	bl	80001fc <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cbc:	f7ff fa9e 	bl	80001fc <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e050      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f0      	bne.n	8000cbc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce2:	d108      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ce4:	4924      	ldr	r1, [pc, #144]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cf6:	4820      	ldr	r0, [pc, #128]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a19      	ldr	r1, [r3, #32]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_RCC_OscConfig+0x4c4>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fa72 	bl	80001fc <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d1c:	f7ff fa6e 	bl	80001fc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e020      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0x460>
 8000d3a:	e018      	b.n	8000d6e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_RCC_OscConfig+0x4c4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fa5b 	bl	80001fc <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d4a:	f7ff fa57 	bl	80001fc <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e009      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_RCC_OscConfig+0x4bc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f0      	bne.n	8000d4a <HAL_RCC_OscConfig+0x48e>
 8000d68:	e001      	b.n	8000d6e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40007000 	.word	0x40007000
 8000d80:	42420060 	.word	0x42420060

08000d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0207 	and.w	r2, r3, #7
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d210      	bcs.n	8000dc2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da0:	496e      	ldr	r1, [pc, #440]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 0207 	bic.w	r2, r3, #7
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000db0:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0207 	and.w	r2, r3, #7
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d001      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e0c8      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dce:	4964      	ldr	r1, [pc, #400]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000dd0:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d06a      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d107      	bne.n	8000e04 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df4:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d115      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e0a7      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d107      	bne.n	8000e1c <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e0c:	4b54      	ldr	r3, [pc, #336]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e09b      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	4b50      	ldr	r3, [pc, #320]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e093      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e2c:	494c      	ldr	r1, [pc, #304]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f023 0203 	bic.w	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e3e:	f7ff f9dd 	bl	80001fc <HAL_GetTick>
 8000e42:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d112      	bne.n	8000e72 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4c:	e00a      	b.n	8000e64 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4e:	f7ff f9d5 	bl	80001fc <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e077      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e64:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d1ee      	bne.n	8000e4e <HAL_RCC_ClockConfig+0xca>
 8000e70:	e027      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d11d      	bne.n	8000eb6 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e7a:	e00a      	b.n	8000e92 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7c:	f7ff f9be 	bl	80001fc <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e060      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e92:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d1ee      	bne.n	8000e7c <HAL_RCC_ClockConfig+0xf8>
 8000e9e:	e010      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ea0:	f7ff f9ac 	bl	80001fc <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e04e      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1ee      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0207 	and.w	r2, r3, #7
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d910      	bls.n	8000ef2 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ed0:	4922      	ldr	r1, [pc, #136]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 0207 	bic.w	r2, r3, #7
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_RCC_ClockConfig+0x1d8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0207 	and.w	r2, r3, #7
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d001      	beq.n	8000ef2 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e030      	b.n	8000f54 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d008      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000efe:	4918      	ldr	r1, [pc, #96]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f1c:	4910      	ldr	r1, [pc, #64]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f30:	f000 f81c 	bl	8000f6c <HAL_RCC_GetSysClockFreq>
 8000f34:	4601      	mov	r1, r0
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_RCC_ClockConfig+0x1dc>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_RCC_ClockConfig+0x1e0>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	fa21 f303 	lsr.w	r3, r1, r3
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_RCC_ClockConfig+0x1e4>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff f913 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40022000 	.word	0x40022000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	08002c28 	.word	0x08002c28
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f6c:	b490      	push	{r4, r7}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f74:	1d3c      	adds	r4, r7, #4
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d002      	beq.n	8000fac <HAL_RCC_GetSysClockFreq+0x40>
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d003      	beq.n	8000fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8000faa:	e02d      	b.n	8001008 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fae:	623b      	str	r3, [r7, #32]
      break;
 8000fb0:	e02d      	b.n	800100e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	0c9b      	lsrs	r3, r3, #18
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	0c5b      	lsrs	r3, r3, #17
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fde:	4413      	add	r3, r2
 8000fe0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fe4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fea:	fb02 f203 	mul.w	r2, r2, r3
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e004      	b.n	8001002 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	623b      	str	r3, [r7, #32]
      break;
 8001006:	e002      	b.n	800100e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_RCC_GetSysClockFreq+0xbc>)
 800100a:	623b      	str	r3, [r7, #32]
      break;
 800100c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800100e:	6a3b      	ldr	r3, [r7, #32]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bc90      	pop	{r4, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	08002bf8 	.word	0x08002bf8
 8001020:	08002c08 	.word	0x08002c08
 8001024:	40021000 	.word	0x40021000
 8001028:	007a1200 	.word	0x007a1200
 800102c:	003d0900 	.word	0x003d0900

08001030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <HAL_RCC_GetHCLKFreq+0x10>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000008 	.word	0x20000008

08001044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001048:	f7ff fff2 	bl	8001030 <HAL_RCC_GetHCLKFreq>
 800104c:	4601      	mov	r1, r0
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000
 8001068:	08002c38 	.word	0x08002c38

0800106c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001070:	f7ff ffde 	bl	8001030 <HAL_RCC_GetHCLKFreq>
 8001074:	4601      	mov	r1, r0
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	0adb      	lsrs	r3, r3, #11
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	4a03      	ldr	r2, [pc, #12]	; (8001090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001088:	4618      	mov	r0, r3
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	08002c38 	.word	0x08002c38

08001094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <RCC_Delay+0x34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <RCC_Delay+0x38>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0a5b      	lsrs	r3, r3, #9
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80010b0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	60fa      	str	r2, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f9      	bne.n	80010b0 <RCC_Delay+0x1c>
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	10624dd3 	.word	0x10624dd3

080010d0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e03f      	b.n	8001162 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fd2c 	bl	8001b54 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	68d2      	ldr	r2, [r2, #12]
 800110e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001112:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fa5f 	bl	80015d8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	6912      	ldr	r2, [r2, #16]
 8001124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6952      	ldr	r2, [r2, #20]
 8001134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001138:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	68d2      	ldr	r2, [r2, #12]
 8001144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001148:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2220      	movs	r2, #32
 8001154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10d      	bne.n	80011be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_UART_IRQHandler+0x52>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f98c 	bl	80014d4 <UART_Receive_IT>
      return;
 80011bc:	e0cc      	b.n	8001358 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80ab 	beq.w	800131c <HAL_UART_IRQHandler+0x1b0>
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_UART_IRQHandler+0x70>
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a0 	beq.w	800131c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00a      	beq.n	80011fc <HAL_UART_IRQHandler+0x90>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00a      	beq.n	800121c <HAL_UART_IRQHandler+0xb0>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	f043 0202 	orr.w	r2, r3, #2
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_UART_IRQHandler+0xd0>
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001234:	f043 0204 	orr.w	r2, r3, #4
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00a      	beq.n	800125c <HAL_UART_IRQHandler+0xf0>
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001254:	f043 0208 	orr.w	r2, r3, #8
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d078      	beq.n	8001356 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_UART_IRQHandler+0x112>
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f92b 	bl	80014d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_UART_IRQHandler+0x13a>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d031      	beq.n	800130a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f877 	bl	800139a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d023      	beq.n	8001302 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	6952      	ldr	r2, [r2, #20]
 80012c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d013      	beq.n	80012fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_UART_IRQHandler+0x1f4>)
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8e8 	bl	80004b4 <HAL_DMA_Abort_IT>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d016      	beq.n	8001318 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012f4:	4610      	mov	r0, r2
 80012f6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012f8:	e00e      	b.n	8001318 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f844 	bl	8001388 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001300:	e00a      	b.n	8001318 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f840 	bl	8001388 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001308:	e006      	b.n	8001318 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f83c 	bl	8001388 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001316:	e01e      	b.n	8001356 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001318:	bf00      	nop
    return;
 800131a:	e01c      	b.n	8001356 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <HAL_UART_IRQHandler+0x1cc>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f863 	bl	80013fc <UART_Transmit_IT>
    return;
 8001336:	e00f      	b.n	8001358 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <HAL_UART_IRQHandler+0x1ec>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f8a9 	bl	80014a4 <UART_EndTransmit_IT>
    return;
 8001352:	bf00      	nop
 8001354:	e000      	b.n	8001358 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001356:	bf00      	nop
  }
}
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	080013d5 	.word	0x080013d5

08001364 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	68d2      	ldr	r2, [r2, #12]
 80013ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	6952      	ldr	r2, [r2, #20]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff ffca 	bl	8001388 <HAL_UART_ErrorCallback>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b21      	cmp	r3, #33	; 0x21
 800140e:	d143      	bne.n	8001498 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001418:	d119      	bne.n	800144e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	8812      	ldrh	r2, [r2, #0]
 8001428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800142c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	1c9a      	adds	r2, r3, #2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	621a      	str	r2, [r3, #32]
 8001440:	e00e      	b.n	8001460 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	621a      	str	r2, [r3, #32]
 800144c:	e008      	b.n	8001460 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	1c58      	adds	r0, r3, #1
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	6208      	str	r0, [r1, #32]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4619      	mov	r1, r3
 800146e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10f      	bne.n	8001494 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	68d2      	ldr	r2, [r2, #12]
 800147e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001482:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	68d2      	ldr	r2, [r2, #12]
 800148e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001492:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	68d2      	ldr	r2, [r2, #12]
 80014b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ba:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff4d 	bl	8001364 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b22      	cmp	r3, #34	; 0x22
 80014e6:	d171      	bne.n	80015cc <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f0:	d123      	bne.n	800153a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10e      	bne.n	800151e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	b29b      	uxth	r3, r3
 8001508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	1c9a      	adds	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
 800151c:	e029      	b.n	8001572 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
 8001538:	e01b      	b.n	8001572 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	1c59      	adds	r1, r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6291      	str	r1, [r2, #40]	; 0x28
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	6852      	ldr	r2, [r2, #4]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	e00c      	b.n	8001572 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	1c59      	adds	r1, r3, #1
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6291      	str	r1, [r2, #40]	; 0x28
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	6852      	ldr	r2, [r2, #4]
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b29b      	uxth	r3, r3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4619      	mov	r1, r3
 8001580:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001582:	2b00      	cmp	r3, #0
 8001584:	d120      	bne.n	80015c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	68d2      	ldr	r2, [r2, #12]
 8001590:	f022 0220 	bic.w	r2, r2, #32
 8001594:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	68d2      	ldr	r2, [r2, #12]
 80015a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a4:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	6952      	ldr	r2, [r2, #20]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fed9 	bl	8001376 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e002      	b.n	80015ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	6912      	ldr	r2, [r2, #16]
 80015ee:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68d2      	ldr	r2, [r2, #12]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800161e:	f023 030c 	bic.w	r3, r3, #12
 8001622:	68f9      	ldr	r1, [r7, #12]
 8001624:	430b      	orrs	r3, r1
 8001626:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	6952      	ldr	r2, [r2, #20]
 8001632:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6992      	ldr	r2, [r2, #24]
 800163a:	430a      	orrs	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6f      	ldr	r2, [pc, #444]	; (8001800 <UART_SetConfig+0x228>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d16b      	bne.n	8001720 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	f7ff fd0e 	bl	800106c <HAL_RCC_GetPCLK2Freq>
 8001650:	4602      	mov	r2, r0
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	441a      	add	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4a67      	ldr	r2, [pc, #412]	; (8001804 <UART_SetConfig+0x22c>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	011d      	lsls	r5, r3, #4
 8001670:	f7ff fcfc 	bl	800106c <HAL_RCC_GetPCLK2Freq>
 8001674:	4602      	mov	r2, r0
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	009a      	lsls	r2, r3, #2
 800167e:	441a      	add	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	fbb2 f6f3 	udiv	r6, r2, r3
 800168a:	f7ff fcef 	bl	800106c <HAL_RCC_GetPCLK2Freq>
 800168e:	4602      	mov	r2, r0
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009a      	lsls	r2, r3, #2
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4a57      	ldr	r2, [pc, #348]	; (8001804 <UART_SetConfig+0x22c>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2264      	movs	r2, #100	; 0x64
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	1af3      	subs	r3, r6, r3
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	3332      	adds	r3, #50	; 0x32
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <UART_SetConfig+0x22c>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	441d      	add	r5, r3
 80016c6:	f7ff fcd1 	bl	800106c <HAL_RCC_GetPCLK2Freq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009a      	lsls	r2, r3, #2
 80016d4:	441a      	add	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80016e0:	f7ff fcc4 	bl	800106c <HAL_RCC_GetPCLK2Freq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	441a      	add	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <UART_SetConfig+0x22c>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	2264      	movs	r2, #100	; 0x64
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	1af3      	subs	r3, r6, r3
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	3332      	adds	r3, #50	; 0x32
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <UART_SetConfig+0x22c>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	442b      	add	r3, r5
 800171c:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800171e:	e06a      	b.n	80017f6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681c      	ldr	r4, [r3, #0]
 8001724:	f7ff fc8e 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
 8001728:	4602      	mov	r2, r0
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	009a      	lsls	r2, r3, #2
 8001732:	441a      	add	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4a31      	ldr	r2, [pc, #196]	; (8001804 <UART_SetConfig+0x22c>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	095b      	lsrs	r3, r3, #5
 8001746:	011d      	lsls	r5, r3, #4
 8001748:	f7ff fc7c 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
 800174c:	4602      	mov	r2, r0
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009a      	lsls	r2, r3, #2
 8001756:	441a      	add	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	fbb2 f6f3 	udiv	r6, r2, r3
 8001762:	f7ff fc6f 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
 8001766:	4602      	mov	r2, r0
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009a      	lsls	r2, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <UART_SetConfig+0x22c>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2264      	movs	r2, #100	; 0x64
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	1af3      	subs	r3, r6, r3
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	3332      	adds	r3, #50	; 0x32
 8001790:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <UART_SetConfig+0x22c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800179c:	441d      	add	r5, r3
 800179e:	f7ff fc51 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009a      	lsls	r2, r3, #2
 80017ac:	441a      	add	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80017b8:	f7ff fc44 	bl	8001044 <HAL_RCC_GetPCLK1Freq>
 80017bc:	4602      	mov	r2, r0
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	441a      	add	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <UART_SetConfig+0x22c>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	2264      	movs	r2, #100	; 0x64
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	1af3      	subs	r3, r6, r3
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	3332      	adds	r3, #50	; 0x32
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <UART_SetConfig+0x22c>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	442b      	add	r3, r5
 80017f4:	60a3      	str	r3, [r4, #8]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fe:	bf00      	nop
 8001800:	40013800 	.word	0x40013800
 8001804:	51eb851f 	.word	0x51eb851f

08001808 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001814:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001820:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001824:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001828:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001830:	e000      	b.n	8001834 <ITM_SendChar+0x2c>
 8001832:	bf00      	nop
 8001834:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f9      	beq.n	8001832 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800183e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <_write>:
#include "debug_print.h"

/*
 * Redirect to SWV/SWO
 */
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e009      	b.n	800187a <_write+0x26>
		ITM_SendChar((*ptr++));
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60ba      	str	r2, [r7, #8]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ffca 	bl	8001808 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbf1      	blt.n	8001866 <_write+0x12>
	return len;
 8001882:	687b      	ldr	r3, [r7, #4]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001890:	f7fe fc5c 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001894:	f000 f822 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001898:	f000 f8a0 	bl	80019dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800189c:	f000 f870 	bl	8001980 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <main+0x44>)
 80018a6:	f7fe fff7 	bl	8000898 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80018aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ae:	f7fe fcaf 	bl	8000210 <HAL_Delay>
		counter++;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <main+0x48>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <main+0x48>)
 80018be:	801a      	strh	r2, [r3, #0]
		DP("Counter=%d\n",counter);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <main+0x48>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <main+0x4c>)
 80018ca:	f000 fa47 	bl	8001d5c <iprintf>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018ce:	e7e7      	b.n	80018a0 <main+0x14>
 80018d0:	40011000 	.word	0x40011000
 80018d4:	2000008c 	.word	0x2000008c
 80018d8:	08002c0c 	.word	0x08002c0c

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b090      	sub	sp, #64	; 0x40
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f4:	2302      	movs	r3, #2
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe ffd7 	bl	80008bc <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001914:	2190      	movs	r1, #144	; 0x90
 8001916:	4818      	ldr	r0, [pc, #96]	; (8001978 <SystemClock_Config+0x9c>)
 8001918:	f000 f8c4 	bl	8001aa4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191c:	230f      	movs	r3, #15
 800191e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001920:	2302      	movs	r3, #2
 8001922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2102      	movs	r1, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa24 	bl	8000d84 <HAL_RCC_ClockConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <SystemClock_Config+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001942:	219e      	movs	r1, #158	; 0x9e
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <SystemClock_Config+0x9c>)
 8001946:	f000 f8ad 	bl	8001aa4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800194a:	f7ff fb71 	bl	8001030 <HAL_RCC_GetHCLKFreq>
 800194e:	4602      	mov	r2, r0
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <SystemClock_Config+0xa0>)
 8001952:	fba3 2302 	umull	r2, r3, r3, r2
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fd76 	bl	800044a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800195e:	2004      	movs	r0, #4
 8001960:	f7fe fd80 	bl	8000464 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7fe fd43 	bl	80003f6 <HAL_NVIC_SetPriority>
}
 8001970:	bf00      	nop
 8001972:	3740      	adds	r7, #64	; 0x40
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	08002c18 	.word	0x08002c18
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_USART1_UART_Init+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 800198c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <MX_USART1_UART_Init+0x50>)
 80019b8:	f7ff fb8a 	bl	80010d0 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <MX_USART1_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80019c2:	21bb      	movs	r1, #187	; 0xbb
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_USART1_UART_Init+0x58>)
 80019c6:	f000 f86d 	bl	8001aa4 <_Error_Handler>
  }

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000a0 	.word	0x200000a0
 80019d4:	40013800 	.word	0x40013800
 80019d8:	08002c18 	.word	0x08002c18

080019dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <MX_GPIO_Init+0xbc>)
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_GPIO_Init+0xbc>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <MX_GPIO_Init+0xbc>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <MX_GPIO_Init+0xbc>)
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_GPIO_Init+0xbc>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a48:	4814      	ldr	r0, [pc, #80]	; (8001a9c <MX_GPIO_Init+0xc0>)
 8001a4a:	f7fe ff0d 	bl	8000868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BlackPill_GPIO_Port, LED_BlackPill_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a54:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <MX_GPIO_Init+0xc4>)
 8001a56:	f7fe ff07 	bl	8000868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <MX_GPIO_Init+0xc0>)
 8001a70:	f7fe fd9c 	bl	80005ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BlackPill_Pin */
  GPIO_InitStruct.Pin = LED_BlackPill_Pin;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BlackPill_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_GPIO_Init+0xc4>)
 8001a8a:	f7fe fd8f 	bl	80005ac <HAL_GPIO_Init>

}
 8001a8e:	bf00      	nop
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001aae:	e7fe      	b.n	8001aae <_Error_Handler+0xa>

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_MspInit+0x9c>)
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_MspInit+0x9c>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_MspInit+0x9c>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ace:	2003      	movs	r0, #3
 8001ad0:	f7fe fc86 	bl	80003e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f06f 000b 	mvn.w	r0, #11
 8001adc:	f7fe fc8b 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f06f 000a 	mvn.w	r0, #10
 8001ae8:	f7fe fc85 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	f06f 0009 	mvn.w	r0, #9
 8001af4:	f7fe fc7f 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	f06f 0004 	mvn.w	r0, #4
 8001b00:	f7fe fc79 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	f06f 0003 	mvn.w	r0, #3
 8001b0c:	f7fe fc73 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	f06f 0001 	mvn.w	r0, #1
 8001b18:	f7fe fc6d 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7fe fc67 	bl	80003f6 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_MspInit+0xa0>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_MspInit+0xa0>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000

08001b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <HAL_UART_MspInit+0x90>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d139      	bne.n	8001bda <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_UART_MspInit+0x94>)
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_UART_MspInit+0x94>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_UART_MspInit+0x94>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b7e:	2340      	movs	r3, #64	; 0x40
 8001b80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <HAL_UART_MspInit+0x98>)
 8001b92:	f7fe fd0b 	bl	80005ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4810      	ldr	r0, [pc, #64]	; (8001bec <HAL_UART_MspInit+0x98>)
 8001baa:	f7fe fcff 	bl	80005ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_UART_MspInit+0x9c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_UART_MspInit+0x9c>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2025      	movs	r0, #37	; 0x25
 8001bd0:	f7fe fc11 	bl	80003f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bd4:	2025      	movs	r0, #37	; 0x25
 8001bd6:	f7fe fc2a 	bl	800042e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <HardFault_Handler+0x4>

08001c06 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <BusFault_Handler+0x4>

08001c12 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <UsageFault_Handler+0x4>

08001c18 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f7fe faca 	bl	80001d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001c44:	f7fe fc2a 	bl	800049c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <USART1_IRQHandler+0x10>)
 8001c52:	f7ff fa8b 	bl	800116c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200000a0 	.word	0x200000a0

08001c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <SystemInit+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <SystemInit+0x5c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c70:	4912      	ldr	r1, [pc, #72]	; (8001cbc <SystemInit+0x5c>)
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <SystemInit+0x5c>)
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <SystemInit+0x60>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <SystemInit+0x5c>)
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <SystemInit+0x5c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <SystemInit+0x5c>)
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <SystemInit+0x5c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <SystemInit+0x5c>)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <SystemInit+0x5c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ca2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SystemInit+0x5c>)
 8001ca6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001caa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SystemInit+0x64>)
 8001cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	f8ff0000 	.word	0xf8ff0000
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cca:	e003      	b.n	8001cd4 <LoopCopyDataInit>

08001ccc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cd2:	3104      	adds	r1, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cdc:	d3f6      	bcc.n	8001ccc <CopyDataInit>
  ldr r2, =_sbss
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ce0:	e002      	b.n	8001ce8 <LoopFillZerobss>

08001ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ce4:	f842 3b04 	str.w	r3, [r2], #4

08001ce8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cec:	d3f9      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cee:	f7ff ffb7 	bl	8001c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f000 f80f 	bl	8001d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf6:	f7ff fdc9 	bl	800188c <main>
  bx lr
 8001cfa:	4770      	bx	lr
  ldr r3, =_sidata
 8001cfc:	08002ce0 	.word	0x08002ce0
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d04:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001d08:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001d0c:	200000e4 	.word	0x200000e4

08001d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC1_2_IRQHandler>
	...

08001d14 <__libc_init_array>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	2500      	movs	r5, #0
 8001d18:	4e0c      	ldr	r6, [pc, #48]	; (8001d4c <__libc_init_array+0x38>)
 8001d1a:	4c0d      	ldr	r4, [pc, #52]	; (8001d50 <__libc_init_array+0x3c>)
 8001d1c:	1ba4      	subs	r4, r4, r6
 8001d1e:	10a4      	asrs	r4, r4, #2
 8001d20:	42a5      	cmp	r5, r4
 8001d22:	d109      	bne.n	8001d38 <__libc_init_array+0x24>
 8001d24:	f000 ff5c 	bl	8002be0 <_init>
 8001d28:	2500      	movs	r5, #0
 8001d2a:	4e0a      	ldr	r6, [pc, #40]	; (8001d54 <__libc_init_array+0x40>)
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	; (8001d58 <__libc_init_array+0x44>)
 8001d2e:	1ba4      	subs	r4, r4, r6
 8001d30:	10a4      	asrs	r4, r4, #2
 8001d32:	42a5      	cmp	r5, r4
 8001d34:	d105      	bne.n	8001d42 <__libc_init_array+0x2e>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d3c:	4798      	blx	r3
 8001d3e:	3501      	adds	r5, #1
 8001d40:	e7ee      	b.n	8001d20 <__libc_init_array+0xc>
 8001d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d46:	4798      	blx	r3
 8001d48:	3501      	adds	r5, #1
 8001d4a:	e7f2      	b.n	8001d32 <__libc_init_array+0x1e>
 8001d4c:	08002cd8 	.word	0x08002cd8
 8001d50:	08002cd8 	.word	0x08002cd8
 8001d54:	08002cd8 	.word	0x08002cd8
 8001d58:	08002cdc 	.word	0x08002cdc

08001d5c <iprintf>:
 8001d5c:	b40f      	push	{r0, r1, r2, r3}
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <iprintf+0x2c>)
 8001d60:	b513      	push	{r0, r1, r4, lr}
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	b124      	cbz	r4, 8001d70 <iprintf+0x14>
 8001d66:	69a3      	ldr	r3, [r4, #24]
 8001d68:	b913      	cbnz	r3, 8001d70 <iprintf+0x14>
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f000 f84e 	bl	8001e0c <__sinit>
 8001d70:	ab05      	add	r3, sp, #20
 8001d72:	9a04      	ldr	r2, [sp, #16]
 8001d74:	68a1      	ldr	r1, [r4, #8]
 8001d76:	4620      	mov	r0, r4
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	f000 f95f 	bl	800203c <_vfiprintf_r>
 8001d7e:	b002      	add	sp, #8
 8001d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d84:	b004      	add	sp, #16
 8001d86:	4770      	bx	lr
 8001d88:	2000000c 	.word	0x2000000c

08001d8c <_cleanup_r>:
 8001d8c:	4901      	ldr	r1, [pc, #4]	; (8001d94 <_cleanup_r+0x8>)
 8001d8e:	f000 b8a9 	b.w	8001ee4 <_fwalk_reent>
 8001d92:	bf00      	nop
 8001d94:	08002915 	.word	0x08002915

08001d98 <std.isra.0>:
 8001d98:	2300      	movs	r3, #0
 8001d9a:	b510      	push	{r4, lr}
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	6003      	str	r3, [r0, #0]
 8001da0:	6043      	str	r3, [r0, #4]
 8001da2:	6083      	str	r3, [r0, #8]
 8001da4:	8181      	strh	r1, [r0, #12]
 8001da6:	6643      	str	r3, [r0, #100]	; 0x64
 8001da8:	81c2      	strh	r2, [r0, #14]
 8001daa:	6103      	str	r3, [r0, #16]
 8001dac:	6143      	str	r3, [r0, #20]
 8001dae:	6183      	str	r3, [r0, #24]
 8001db0:	4619      	mov	r1, r3
 8001db2:	2208      	movs	r2, #8
 8001db4:	305c      	adds	r0, #92	; 0x5c
 8001db6:	f000 f8b3 	bl	8001f20 <memset>
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <std.isra.0+0x38>)
 8001dbc:	6224      	str	r4, [r4, #32]
 8001dbe:	6263      	str	r3, [r4, #36]	; 0x24
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <std.isra.0+0x3c>)
 8001dc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <std.isra.0+0x40>)
 8001dc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <std.isra.0+0x44>)
 8001dca:	6323      	str	r3, [r4, #48]	; 0x30
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	080025b9 	.word	0x080025b9
 8001dd4:	080025db 	.word	0x080025db
 8001dd8:	08002613 	.word	0x08002613
 8001ddc:	08002637 	.word	0x08002637

08001de0 <__sfmoreglue>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	2568      	movs	r5, #104	; 0x68
 8001de4:	1e4a      	subs	r2, r1, #1
 8001de6:	4355      	muls	r5, r2
 8001de8:	460e      	mov	r6, r1
 8001dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001dee:	f000 f89f 	bl	8001f30 <_malloc_r>
 8001df2:	4604      	mov	r4, r0
 8001df4:	b140      	cbz	r0, 8001e08 <__sfmoreglue+0x28>
 8001df6:	2100      	movs	r1, #0
 8001df8:	e880 0042 	stmia.w	r0, {r1, r6}
 8001dfc:	300c      	adds	r0, #12
 8001dfe:	60a0      	str	r0, [r4, #8]
 8001e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e04:	f000 f88c 	bl	8001f20 <memset>
 8001e08:	4620      	mov	r0, r4
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}

08001e0c <__sinit>:
 8001e0c:	6983      	ldr	r3, [r0, #24]
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	4604      	mov	r4, r0
 8001e12:	bb33      	cbnz	r3, 8001e62 <__sinit+0x56>
 8001e14:	6483      	str	r3, [r0, #72]	; 0x48
 8001e16:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001e18:	6503      	str	r3, [r0, #80]	; 0x50
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <__sinit+0x58>)
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <__sinit+0x5c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6282      	str	r2, [r0, #40]	; 0x28
 8001e22:	4298      	cmp	r0, r3
 8001e24:	bf04      	itt	eq
 8001e26:	2301      	moveq	r3, #1
 8001e28:	6183      	streq	r3, [r0, #24]
 8001e2a:	f000 f81f 	bl	8001e6c <__sfp>
 8001e2e:	6060      	str	r0, [r4, #4]
 8001e30:	4620      	mov	r0, r4
 8001e32:	f000 f81b 	bl	8001e6c <__sfp>
 8001e36:	60a0      	str	r0, [r4, #8]
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f000 f817 	bl	8001e6c <__sfp>
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60e0      	str	r0, [r4, #12]
 8001e42:	2104      	movs	r1, #4
 8001e44:	6860      	ldr	r0, [r4, #4]
 8001e46:	f7ff ffa7 	bl	8001d98 <std.isra.0>
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2109      	movs	r1, #9
 8001e4e:	68a0      	ldr	r0, [r4, #8]
 8001e50:	f7ff ffa2 	bl	8001d98 <std.isra.0>
 8001e54:	2202      	movs	r2, #2
 8001e56:	2112      	movs	r1, #18
 8001e58:	68e0      	ldr	r0, [r4, #12]
 8001e5a:	f7ff ff9d 	bl	8001d98 <std.isra.0>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61a3      	str	r3, [r4, #24]
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	08002ca0 	.word	0x08002ca0
 8001e68:	08001d8d 	.word	0x08001d8d

08001e6c <__sfp>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <__sfp+0x74>)
 8001e70:	4607      	mov	r7, r0
 8001e72:	681e      	ldr	r6, [r3, #0]
 8001e74:	69b3      	ldr	r3, [r6, #24]
 8001e76:	b913      	cbnz	r3, 8001e7e <__sfp+0x12>
 8001e78:	4630      	mov	r0, r6
 8001e7a:	f7ff ffc7 	bl	8001e0c <__sinit>
 8001e7e:	3648      	adds	r6, #72	; 0x48
 8001e80:	68b4      	ldr	r4, [r6, #8]
 8001e82:	6873      	ldr	r3, [r6, #4]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	d503      	bpl.n	8001e90 <__sfp+0x24>
 8001e88:	6833      	ldr	r3, [r6, #0]
 8001e8a:	b133      	cbz	r3, 8001e9a <__sfp+0x2e>
 8001e8c:	6836      	ldr	r6, [r6, #0]
 8001e8e:	e7f7      	b.n	8001e80 <__sfp+0x14>
 8001e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e94:	b16d      	cbz	r5, 8001eb2 <__sfp+0x46>
 8001e96:	3468      	adds	r4, #104	; 0x68
 8001e98:	e7f4      	b.n	8001e84 <__sfp+0x18>
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	f7ff ff9f 	bl	8001de0 <__sfmoreglue>
 8001ea2:	6030      	str	r0, [r6, #0]
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d1f1      	bne.n	8001e8c <__sfp+0x20>
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	4604      	mov	r4, r0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4620      	mov	r0, r4
 8001eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb6:	81e3      	strh	r3, [r4, #14]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	6665      	str	r5, [r4, #100]	; 0x64
 8001ebc:	81a3      	strh	r3, [r4, #12]
 8001ebe:	6025      	str	r5, [r4, #0]
 8001ec0:	60a5      	str	r5, [r4, #8]
 8001ec2:	6065      	str	r5, [r4, #4]
 8001ec4:	6125      	str	r5, [r4, #16]
 8001ec6:	6165      	str	r5, [r4, #20]
 8001ec8:	61a5      	str	r5, [r4, #24]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4629      	mov	r1, r5
 8001ece:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ed2:	f000 f825 	bl	8001f20 <memset>
 8001ed6:	6365      	str	r5, [r4, #52]	; 0x34
 8001ed8:	63a5      	str	r5, [r4, #56]	; 0x38
 8001eda:	64a5      	str	r5, [r4, #72]	; 0x48
 8001edc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001ede:	e7e6      	b.n	8001eae <__sfp+0x42>
 8001ee0:	08002ca0 	.word	0x08002ca0

08001ee4 <_fwalk_reent>:
 8001ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ee8:	4680      	mov	r8, r0
 8001eea:	4689      	mov	r9, r1
 8001eec:	2600      	movs	r6, #0
 8001eee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ef2:	b914      	cbnz	r4, 8001efa <_fwalk_reent+0x16>
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001efa:	68a5      	ldr	r5, [r4, #8]
 8001efc:	6867      	ldr	r7, [r4, #4]
 8001efe:	3f01      	subs	r7, #1
 8001f00:	d501      	bpl.n	8001f06 <_fwalk_reent+0x22>
 8001f02:	6824      	ldr	r4, [r4, #0]
 8001f04:	e7f5      	b.n	8001ef2 <_fwalk_reent+0xe>
 8001f06:	89ab      	ldrh	r3, [r5, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d907      	bls.n	8001f1c <_fwalk_reent+0x38>
 8001f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f10:	3301      	adds	r3, #1
 8001f12:	d003      	beq.n	8001f1c <_fwalk_reent+0x38>
 8001f14:	4629      	mov	r1, r5
 8001f16:	4640      	mov	r0, r8
 8001f18:	47c8      	blx	r9
 8001f1a:	4306      	orrs	r6, r0
 8001f1c:	3568      	adds	r5, #104	; 0x68
 8001f1e:	e7ee      	b.n	8001efe <_fwalk_reent+0x1a>

08001f20 <memset>:
 8001f20:	4603      	mov	r3, r0
 8001f22:	4402      	add	r2, r0
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d100      	bne.n	8001f2a <memset+0xa>
 8001f28:	4770      	bx	lr
 8001f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f2e:	e7f9      	b.n	8001f24 <memset+0x4>

08001f30 <_malloc_r>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	1ccd      	adds	r5, r1, #3
 8001f34:	f025 0503 	bic.w	r5, r5, #3
 8001f38:	3508      	adds	r5, #8
 8001f3a:	2d0c      	cmp	r5, #12
 8001f3c:	bf38      	it	cc
 8001f3e:	250c      	movcc	r5, #12
 8001f40:	2d00      	cmp	r5, #0
 8001f42:	4606      	mov	r6, r0
 8001f44:	db01      	blt.n	8001f4a <_malloc_r+0x1a>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d903      	bls.n	8001f52 <_malloc_r+0x22>
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	6033      	str	r3, [r6, #0]
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
 8001f52:	f000 fd8d 	bl	8002a70 <__malloc_lock>
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <_malloc_r+0xb4>)
 8001f58:	6814      	ldr	r4, [r2, #0]
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	b991      	cbnz	r1, 8001f84 <_malloc_r+0x54>
 8001f5e:	4c22      	ldr	r4, [pc, #136]	; (8001fe8 <_malloc_r+0xb8>)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	b91b      	cbnz	r3, 8001f6c <_malloc_r+0x3c>
 8001f64:	4630      	mov	r0, r6
 8001f66:	f000 fb17 	bl	8002598 <_sbrk_r>
 8001f6a:	6020      	str	r0, [r4, #0]
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	4630      	mov	r0, r6
 8001f70:	f000 fb12 	bl	8002598 <_sbrk_r>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d126      	bne.n	8001fc6 <_malloc_r+0x96>
 8001f78:	230c      	movs	r3, #12
 8001f7a:	4630      	mov	r0, r6
 8001f7c:	6033      	str	r3, [r6, #0]
 8001f7e:	f000 fd78 	bl	8002a72 <__malloc_unlock>
 8001f82:	e7e4      	b.n	8001f4e <_malloc_r+0x1e>
 8001f84:	680b      	ldr	r3, [r1, #0]
 8001f86:	1b5b      	subs	r3, r3, r5
 8001f88:	d41a      	bmi.n	8001fc0 <_malloc_r+0x90>
 8001f8a:	2b0b      	cmp	r3, #11
 8001f8c:	d90f      	bls.n	8001fae <_malloc_r+0x7e>
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	18cc      	adds	r4, r1, r3
 8001f92:	50cd      	str	r5, [r1, r3]
 8001f94:	4630      	mov	r0, r6
 8001f96:	f000 fd6c 	bl	8002a72 <__malloc_unlock>
 8001f9a:	f104 000b 	add.w	r0, r4, #11
 8001f9e:	1d23      	adds	r3, r4, #4
 8001fa0:	f020 0007 	bic.w	r0, r0, #7
 8001fa4:	1ac3      	subs	r3, r0, r3
 8001fa6:	d01b      	beq.n	8001fe0 <_malloc_r+0xb0>
 8001fa8:	425a      	negs	r2, r3
 8001faa:	50e2      	str	r2, [r4, r3]
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	bf0b      	itete	eq
 8001fb2:	6863      	ldreq	r3, [r4, #4]
 8001fb4:	684b      	ldrne	r3, [r1, #4]
 8001fb6:	6013      	streq	r3, [r2, #0]
 8001fb8:	6063      	strne	r3, [r4, #4]
 8001fba:	bf18      	it	ne
 8001fbc:	460c      	movne	r4, r1
 8001fbe:	e7e9      	b.n	8001f94 <_malloc_r+0x64>
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	6849      	ldr	r1, [r1, #4]
 8001fc4:	e7ca      	b.n	8001f5c <_malloc_r+0x2c>
 8001fc6:	1cc4      	adds	r4, r0, #3
 8001fc8:	f024 0403 	bic.w	r4, r4, #3
 8001fcc:	42a0      	cmp	r0, r4
 8001fce:	d005      	beq.n	8001fdc <_malloc_r+0xac>
 8001fd0:	1a21      	subs	r1, r4, r0
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	f000 fae0 	bl	8002598 <_sbrk_r>
 8001fd8:	3001      	adds	r0, #1
 8001fda:	d0cd      	beq.n	8001f78 <_malloc_r+0x48>
 8001fdc:	6025      	str	r5, [r4, #0]
 8001fde:	e7d9      	b.n	8001f94 <_malloc_r+0x64>
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000090 	.word	0x20000090
 8001fe8:	20000094 	.word	0x20000094

08001fec <__sfputc_r>:
 8001fec:	6893      	ldr	r3, [r2, #8]
 8001fee:	b410      	push	{r4}
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	da08      	bge.n	800200a <__sfputc_r+0x1e>
 8001ff8:	6994      	ldr	r4, [r2, #24]
 8001ffa:	42a3      	cmp	r3, r4
 8001ffc:	db02      	blt.n	8002004 <__sfputc_r+0x18>
 8001ffe:	b2cb      	uxtb	r3, r1
 8002000:	2b0a      	cmp	r3, #10
 8002002:	d102      	bne.n	800200a <__sfputc_r+0x1e>
 8002004:	bc10      	pop	{r4}
 8002006:	f000 bb1b 	b.w	8002640 <__swbuf_r>
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	1c58      	adds	r0, r3, #1
 800200e:	6010      	str	r0, [r2, #0]
 8002010:	7019      	strb	r1, [r3, #0]
 8002012:	b2c8      	uxtb	r0, r1
 8002014:	bc10      	pop	{r4}
 8002016:	4770      	bx	lr

08002018 <__sfputs_r>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	4606      	mov	r6, r0
 800201c:	460f      	mov	r7, r1
 800201e:	4614      	mov	r4, r2
 8002020:	18d5      	adds	r5, r2, r3
 8002022:	42ac      	cmp	r4, r5
 8002024:	d101      	bne.n	800202a <__sfputs_r+0x12>
 8002026:	2000      	movs	r0, #0
 8002028:	e007      	b.n	800203a <__sfputs_r+0x22>
 800202a:	463a      	mov	r2, r7
 800202c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002030:	4630      	mov	r0, r6
 8002032:	f7ff ffdb 	bl	8001fec <__sfputc_r>
 8002036:	1c43      	adds	r3, r0, #1
 8002038:	d1f3      	bne.n	8002022 <__sfputs_r+0xa>
 800203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800203c <_vfiprintf_r>:
 800203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002040:	b09d      	sub	sp, #116	; 0x74
 8002042:	460c      	mov	r4, r1
 8002044:	4617      	mov	r7, r2
 8002046:	9303      	str	r3, [sp, #12]
 8002048:	4606      	mov	r6, r0
 800204a:	b118      	cbz	r0, 8002054 <_vfiprintf_r+0x18>
 800204c:	6983      	ldr	r3, [r0, #24]
 800204e:	b90b      	cbnz	r3, 8002054 <_vfiprintf_r+0x18>
 8002050:	f7ff fedc 	bl	8001e0c <__sinit>
 8002054:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <_vfiprintf_r+0x20c>)
 8002056:	429c      	cmp	r4, r3
 8002058:	d157      	bne.n	800210a <_vfiprintf_r+0xce>
 800205a:	6874      	ldr	r4, [r6, #4]
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	0718      	lsls	r0, r3, #28
 8002060:	d55d      	bpl.n	800211e <_vfiprintf_r+0xe2>
 8002062:	6923      	ldr	r3, [r4, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d05a      	beq.n	800211e <_vfiprintf_r+0xe2>
 8002068:	2300      	movs	r3, #0
 800206a:	9309      	str	r3, [sp, #36]	; 0x24
 800206c:	2320      	movs	r3, #32
 800206e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002072:	2330      	movs	r3, #48	; 0x30
 8002074:	f04f 0b01 	mov.w	fp, #1
 8002078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800207c:	46b8      	mov	r8, r7
 800207e:	4645      	mov	r5, r8
 8002080:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d155      	bne.n	8002134 <_vfiprintf_r+0xf8>
 8002088:	ebb8 0a07 	subs.w	sl, r8, r7
 800208c:	d00b      	beq.n	80020a6 <_vfiprintf_r+0x6a>
 800208e:	4653      	mov	r3, sl
 8002090:	463a      	mov	r2, r7
 8002092:	4621      	mov	r1, r4
 8002094:	4630      	mov	r0, r6
 8002096:	f7ff ffbf 	bl	8002018 <__sfputs_r>
 800209a:	3001      	adds	r0, #1
 800209c:	f000 80c4 	beq.w	8002228 <_vfiprintf_r+0x1ec>
 80020a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020a2:	4453      	add	r3, sl
 80020a4:	9309      	str	r3, [sp, #36]	; 0x24
 80020a6:	f898 3000 	ldrb.w	r3, [r8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80bc 	beq.w	8002228 <_vfiprintf_r+0x1ec>
 80020b0:	2300      	movs	r3, #0
 80020b2:	f04f 32ff 	mov.w	r2, #4294967295
 80020b6:	9304      	str	r3, [sp, #16]
 80020b8:	9307      	str	r3, [sp, #28]
 80020ba:	9205      	str	r2, [sp, #20]
 80020bc:	9306      	str	r3, [sp, #24]
 80020be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020c2:	931a      	str	r3, [sp, #104]	; 0x68
 80020c4:	2205      	movs	r2, #5
 80020c6:	7829      	ldrb	r1, [r5, #0]
 80020c8:	4860      	ldr	r0, [pc, #384]	; (800224c <_vfiprintf_r+0x210>)
 80020ca:	f000 fcc3 	bl	8002a54 <memchr>
 80020ce:	f105 0801 	add.w	r8, r5, #1
 80020d2:	9b04      	ldr	r3, [sp, #16]
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d131      	bne.n	800213c <_vfiprintf_r+0x100>
 80020d8:	06d9      	lsls	r1, r3, #27
 80020da:	bf44      	itt	mi
 80020dc:	2220      	movmi	r2, #32
 80020de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020e2:	071a      	lsls	r2, r3, #28
 80020e4:	bf44      	itt	mi
 80020e6:	222b      	movmi	r2, #43	; 0x2b
 80020e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020ec:	782a      	ldrb	r2, [r5, #0]
 80020ee:	2a2a      	cmp	r2, #42	; 0x2a
 80020f0:	d02c      	beq.n	800214c <_vfiprintf_r+0x110>
 80020f2:	2100      	movs	r1, #0
 80020f4:	200a      	movs	r0, #10
 80020f6:	9a07      	ldr	r2, [sp, #28]
 80020f8:	46a8      	mov	r8, r5
 80020fa:	f898 3000 	ldrb.w	r3, [r8]
 80020fe:	3501      	adds	r5, #1
 8002100:	3b30      	subs	r3, #48	; 0x30
 8002102:	2b09      	cmp	r3, #9
 8002104:	d96d      	bls.n	80021e2 <_vfiprintf_r+0x1a6>
 8002106:	b371      	cbz	r1, 8002166 <_vfiprintf_r+0x12a>
 8002108:	e026      	b.n	8002158 <_vfiprintf_r+0x11c>
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <_vfiprintf_r+0x214>)
 800210c:	429c      	cmp	r4, r3
 800210e:	d101      	bne.n	8002114 <_vfiprintf_r+0xd8>
 8002110:	68b4      	ldr	r4, [r6, #8]
 8002112:	e7a3      	b.n	800205c <_vfiprintf_r+0x20>
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <_vfiprintf_r+0x218>)
 8002116:	429c      	cmp	r4, r3
 8002118:	bf08      	it	eq
 800211a:	68f4      	ldreq	r4, [r6, #12]
 800211c:	e79e      	b.n	800205c <_vfiprintf_r+0x20>
 800211e:	4621      	mov	r1, r4
 8002120:	4630      	mov	r0, r6
 8002122:	f000 faf1 	bl	8002708 <__swsetup_r>
 8002126:	2800      	cmp	r0, #0
 8002128:	d09e      	beq.n	8002068 <_vfiprintf_r+0x2c>
 800212a:	f04f 30ff 	mov.w	r0, #4294967295
 800212e:	b01d      	add	sp, #116	; 0x74
 8002130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002134:	2b25      	cmp	r3, #37	; 0x25
 8002136:	d0a7      	beq.n	8002088 <_vfiprintf_r+0x4c>
 8002138:	46a8      	mov	r8, r5
 800213a:	e7a0      	b.n	800207e <_vfiprintf_r+0x42>
 800213c:	4a43      	ldr	r2, [pc, #268]	; (800224c <_vfiprintf_r+0x210>)
 800213e:	4645      	mov	r5, r8
 8002140:	1a80      	subs	r0, r0, r2
 8002142:	fa0b f000 	lsl.w	r0, fp, r0
 8002146:	4318      	orrs	r0, r3
 8002148:	9004      	str	r0, [sp, #16]
 800214a:	e7bb      	b.n	80020c4 <_vfiprintf_r+0x88>
 800214c:	9a03      	ldr	r2, [sp, #12]
 800214e:	1d11      	adds	r1, r2, #4
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	9103      	str	r1, [sp, #12]
 8002154:	2a00      	cmp	r2, #0
 8002156:	db01      	blt.n	800215c <_vfiprintf_r+0x120>
 8002158:	9207      	str	r2, [sp, #28]
 800215a:	e004      	b.n	8002166 <_vfiprintf_r+0x12a>
 800215c:	4252      	negs	r2, r2
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	9207      	str	r2, [sp, #28]
 8002164:	9304      	str	r3, [sp, #16]
 8002166:	f898 3000 	ldrb.w	r3, [r8]
 800216a:	2b2e      	cmp	r3, #46	; 0x2e
 800216c:	d110      	bne.n	8002190 <_vfiprintf_r+0x154>
 800216e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002172:	f108 0101 	add.w	r1, r8, #1
 8002176:	2b2a      	cmp	r3, #42	; 0x2a
 8002178:	d137      	bne.n	80021ea <_vfiprintf_r+0x1ae>
 800217a:	9b03      	ldr	r3, [sp, #12]
 800217c:	f108 0802 	add.w	r8, r8, #2
 8002180:	1d1a      	adds	r2, r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	9203      	str	r2, [sp, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	bfb8      	it	lt
 800218a:	f04f 33ff 	movlt.w	r3, #4294967295
 800218e:	9305      	str	r3, [sp, #20]
 8002190:	4d31      	ldr	r5, [pc, #196]	; (8002258 <_vfiprintf_r+0x21c>)
 8002192:	2203      	movs	r2, #3
 8002194:	f898 1000 	ldrb.w	r1, [r8]
 8002198:	4628      	mov	r0, r5
 800219a:	f000 fc5b 	bl	8002a54 <memchr>
 800219e:	b140      	cbz	r0, 80021b2 <_vfiprintf_r+0x176>
 80021a0:	2340      	movs	r3, #64	; 0x40
 80021a2:	1b40      	subs	r0, r0, r5
 80021a4:	fa03 f000 	lsl.w	r0, r3, r0
 80021a8:	9b04      	ldr	r3, [sp, #16]
 80021aa:	f108 0801 	add.w	r8, r8, #1
 80021ae:	4303      	orrs	r3, r0
 80021b0:	9304      	str	r3, [sp, #16]
 80021b2:	f898 1000 	ldrb.w	r1, [r8]
 80021b6:	2206      	movs	r2, #6
 80021b8:	4828      	ldr	r0, [pc, #160]	; (800225c <_vfiprintf_r+0x220>)
 80021ba:	f108 0701 	add.w	r7, r8, #1
 80021be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021c2:	f000 fc47 	bl	8002a54 <memchr>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d034      	beq.n	8002234 <_vfiprintf_r+0x1f8>
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <_vfiprintf_r+0x224>)
 80021cc:	bb03      	cbnz	r3, 8002210 <_vfiprintf_r+0x1d4>
 80021ce:	9b03      	ldr	r3, [sp, #12]
 80021d0:	3307      	adds	r3, #7
 80021d2:	f023 0307 	bic.w	r3, r3, #7
 80021d6:	3308      	adds	r3, #8
 80021d8:	9303      	str	r3, [sp, #12]
 80021da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021dc:	444b      	add	r3, r9
 80021de:	9309      	str	r3, [sp, #36]	; 0x24
 80021e0:	e74c      	b.n	800207c <_vfiprintf_r+0x40>
 80021e2:	fb00 3202 	mla	r2, r0, r2, r3
 80021e6:	2101      	movs	r1, #1
 80021e8:	e786      	b.n	80020f8 <_vfiprintf_r+0xbc>
 80021ea:	2300      	movs	r3, #0
 80021ec:	250a      	movs	r5, #10
 80021ee:	4618      	mov	r0, r3
 80021f0:	9305      	str	r3, [sp, #20]
 80021f2:	4688      	mov	r8, r1
 80021f4:	f898 2000 	ldrb.w	r2, [r8]
 80021f8:	3101      	adds	r1, #1
 80021fa:	3a30      	subs	r2, #48	; 0x30
 80021fc:	2a09      	cmp	r2, #9
 80021fe:	d903      	bls.n	8002208 <_vfiprintf_r+0x1cc>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0c5      	beq.n	8002190 <_vfiprintf_r+0x154>
 8002204:	9005      	str	r0, [sp, #20]
 8002206:	e7c3      	b.n	8002190 <_vfiprintf_r+0x154>
 8002208:	fb05 2000 	mla	r0, r5, r0, r2
 800220c:	2301      	movs	r3, #1
 800220e:	e7f0      	b.n	80021f2 <_vfiprintf_r+0x1b6>
 8002210:	ab03      	add	r3, sp, #12
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4622      	mov	r2, r4
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_vfiprintf_r+0x228>)
 8002218:	a904      	add	r1, sp, #16
 800221a:	4630      	mov	r0, r6
 800221c:	f3af 8000 	nop.w
 8002220:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002224:	4681      	mov	r9, r0
 8002226:	d1d8      	bne.n	80021da <_vfiprintf_r+0x19e>
 8002228:	89a3      	ldrh	r3, [r4, #12]
 800222a:	065b      	lsls	r3, r3, #25
 800222c:	f53f af7d 	bmi.w	800212a <_vfiprintf_r+0xee>
 8002230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002232:	e77c      	b.n	800212e <_vfiprintf_r+0xf2>
 8002234:	ab03      	add	r3, sp, #12
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4622      	mov	r2, r4
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <_vfiprintf_r+0x228>)
 800223c:	a904      	add	r1, sp, #16
 800223e:	4630      	mov	r0, r6
 8002240:	f000 f88a 	bl	8002358 <_printf_i>
 8002244:	e7ec      	b.n	8002220 <_vfiprintf_r+0x1e4>
 8002246:	bf00      	nop
 8002248:	08002c60 	.word	0x08002c60
 800224c:	08002ca4 	.word	0x08002ca4
 8002250:	08002c80 	.word	0x08002c80
 8002254:	08002c40 	.word	0x08002c40
 8002258:	08002caa 	.word	0x08002caa
 800225c:	08002cae 	.word	0x08002cae
 8002260:	00000000 	.word	0x00000000
 8002264:	08002019 	.word	0x08002019

08002268 <_printf_common>:
 8002268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800226c:	4691      	mov	r9, r2
 800226e:	461f      	mov	r7, r3
 8002270:	688a      	ldr	r2, [r1, #8]
 8002272:	690b      	ldr	r3, [r1, #16]
 8002274:	4606      	mov	r6, r0
 8002276:	4293      	cmp	r3, r2
 8002278:	bfb8      	it	lt
 800227a:	4613      	movlt	r3, r2
 800227c:	f8c9 3000 	str.w	r3, [r9]
 8002280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002284:	460c      	mov	r4, r1
 8002286:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800228a:	b112      	cbz	r2, 8002292 <_printf_common+0x2a>
 800228c:	3301      	adds	r3, #1
 800228e:	f8c9 3000 	str.w	r3, [r9]
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	0699      	lsls	r1, r3, #26
 8002296:	bf42      	ittt	mi
 8002298:	f8d9 3000 	ldrmi.w	r3, [r9]
 800229c:	3302      	addmi	r3, #2
 800229e:	f8c9 3000 	strmi.w	r3, [r9]
 80022a2:	6825      	ldr	r5, [r4, #0]
 80022a4:	f015 0506 	ands.w	r5, r5, #6
 80022a8:	d107      	bne.n	80022ba <_printf_common+0x52>
 80022aa:	f104 0a19 	add.w	sl, r4, #25
 80022ae:	68e3      	ldr	r3, [r4, #12]
 80022b0:	f8d9 2000 	ldr.w	r2, [r9]
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	429d      	cmp	r5, r3
 80022b8:	db2a      	blt.n	8002310 <_printf_common+0xa8>
 80022ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	3300      	adds	r3, #0
 80022c2:	bf18      	it	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	0692      	lsls	r2, r2, #26
 80022c8:	d42f      	bmi.n	800232a <_printf_common+0xc2>
 80022ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022ce:	4639      	mov	r1, r7
 80022d0:	4630      	mov	r0, r6
 80022d2:	47c0      	blx	r8
 80022d4:	3001      	adds	r0, #1
 80022d6:	d022      	beq.n	800231e <_printf_common+0xb6>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	68e5      	ldr	r5, [r4, #12]
 80022dc:	f003 0306 	and.w	r3, r3, #6
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	bf18      	it	ne
 80022e4:	2500      	movne	r5, #0
 80022e6:	f8d9 2000 	ldr.w	r2, [r9]
 80022ea:	f04f 0900 	mov.w	r9, #0
 80022ee:	bf08      	it	eq
 80022f0:	1aad      	subeq	r5, r5, r2
 80022f2:	68a3      	ldr	r3, [r4, #8]
 80022f4:	6922      	ldr	r2, [r4, #16]
 80022f6:	bf08      	it	eq
 80022f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bfc4      	itt	gt
 8002300:	1a9b      	subgt	r3, r3, r2
 8002302:	18ed      	addgt	r5, r5, r3
 8002304:	341a      	adds	r4, #26
 8002306:	454d      	cmp	r5, r9
 8002308:	d11b      	bne.n	8002342 <_printf_common+0xda>
 800230a:	2000      	movs	r0, #0
 800230c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002310:	2301      	movs	r3, #1
 8002312:	4652      	mov	r2, sl
 8002314:	4639      	mov	r1, r7
 8002316:	4630      	mov	r0, r6
 8002318:	47c0      	blx	r8
 800231a:	3001      	adds	r0, #1
 800231c:	d103      	bne.n	8002326 <_printf_common+0xbe>
 800231e:	f04f 30ff 	mov.w	r0, #4294967295
 8002322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002326:	3501      	adds	r5, #1
 8002328:	e7c1      	b.n	80022ae <_printf_common+0x46>
 800232a:	2030      	movs	r0, #48	; 0x30
 800232c:	18e1      	adds	r1, r4, r3
 800232e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002338:	4422      	add	r2, r4
 800233a:	3302      	adds	r3, #2
 800233c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002340:	e7c3      	b.n	80022ca <_printf_common+0x62>
 8002342:	2301      	movs	r3, #1
 8002344:	4622      	mov	r2, r4
 8002346:	4639      	mov	r1, r7
 8002348:	4630      	mov	r0, r6
 800234a:	47c0      	blx	r8
 800234c:	3001      	adds	r0, #1
 800234e:	d0e6      	beq.n	800231e <_printf_common+0xb6>
 8002350:	f109 0901 	add.w	r9, r9, #1
 8002354:	e7d7      	b.n	8002306 <_printf_common+0x9e>
	...

08002358 <_printf_i>:
 8002358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800235c:	4617      	mov	r7, r2
 800235e:	7e0a      	ldrb	r2, [r1, #24]
 8002360:	b085      	sub	sp, #20
 8002362:	2a6e      	cmp	r2, #110	; 0x6e
 8002364:	4698      	mov	r8, r3
 8002366:	4606      	mov	r6, r0
 8002368:	460c      	mov	r4, r1
 800236a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800236c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002370:	f000 80bc 	beq.w	80024ec <_printf_i+0x194>
 8002374:	d81a      	bhi.n	80023ac <_printf_i+0x54>
 8002376:	2a63      	cmp	r2, #99	; 0x63
 8002378:	d02e      	beq.n	80023d8 <_printf_i+0x80>
 800237a:	d80a      	bhi.n	8002392 <_printf_i+0x3a>
 800237c:	2a00      	cmp	r2, #0
 800237e:	f000 80c8 	beq.w	8002512 <_printf_i+0x1ba>
 8002382:	2a58      	cmp	r2, #88	; 0x58
 8002384:	f000 808a 	beq.w	800249c <_printf_i+0x144>
 8002388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800238c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002390:	e02a      	b.n	80023e8 <_printf_i+0x90>
 8002392:	2a64      	cmp	r2, #100	; 0x64
 8002394:	d001      	beq.n	800239a <_printf_i+0x42>
 8002396:	2a69      	cmp	r2, #105	; 0x69
 8002398:	d1f6      	bne.n	8002388 <_printf_i+0x30>
 800239a:	6821      	ldr	r1, [r4, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023a2:	d023      	beq.n	80023ec <_printf_i+0x94>
 80023a4:	1d11      	adds	r1, r2, #4
 80023a6:	6019      	str	r1, [r3, #0]
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	e027      	b.n	80023fc <_printf_i+0xa4>
 80023ac:	2a73      	cmp	r2, #115	; 0x73
 80023ae:	f000 80b4 	beq.w	800251a <_printf_i+0x1c2>
 80023b2:	d808      	bhi.n	80023c6 <_printf_i+0x6e>
 80023b4:	2a6f      	cmp	r2, #111	; 0x6f
 80023b6:	d02a      	beq.n	800240e <_printf_i+0xb6>
 80023b8:	2a70      	cmp	r2, #112	; 0x70
 80023ba:	d1e5      	bne.n	8002388 <_printf_i+0x30>
 80023bc:	680a      	ldr	r2, [r1, #0]
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	600a      	str	r2, [r1, #0]
 80023c4:	e003      	b.n	80023ce <_printf_i+0x76>
 80023c6:	2a75      	cmp	r2, #117	; 0x75
 80023c8:	d021      	beq.n	800240e <_printf_i+0xb6>
 80023ca:	2a78      	cmp	r2, #120	; 0x78
 80023cc:	d1dc      	bne.n	8002388 <_printf_i+0x30>
 80023ce:	2278      	movs	r2, #120	; 0x78
 80023d0:	496f      	ldr	r1, [pc, #444]	; (8002590 <_printf_i+0x238>)
 80023d2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80023d6:	e064      	b.n	80024a2 <_printf_i+0x14a>
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80023de:	1d11      	adds	r1, r2, #4
 80023e0:	6019      	str	r1, [r3, #0]
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0a3      	b.n	8002534 <_printf_i+0x1dc>
 80023ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80023f0:	f102 0104 	add.w	r1, r2, #4
 80023f4:	6019      	str	r1, [r3, #0]
 80023f6:	d0d7      	beq.n	80023a8 <_printf_i+0x50>
 80023f8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da03      	bge.n	8002408 <_printf_i+0xb0>
 8002400:	222d      	movs	r2, #45	; 0x2d
 8002402:	425b      	negs	r3, r3
 8002404:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002408:	4962      	ldr	r1, [pc, #392]	; (8002594 <_printf_i+0x23c>)
 800240a:	220a      	movs	r2, #10
 800240c:	e017      	b.n	800243e <_printf_i+0xe6>
 800240e:	6820      	ldr	r0, [r4, #0]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002416:	d003      	beq.n	8002420 <_printf_i+0xc8>
 8002418:	1d08      	adds	r0, r1, #4
 800241a:	6018      	str	r0, [r3, #0]
 800241c:	680b      	ldr	r3, [r1, #0]
 800241e:	e006      	b.n	800242e <_printf_i+0xd6>
 8002420:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002424:	f101 0004 	add.w	r0, r1, #4
 8002428:	6018      	str	r0, [r3, #0]
 800242a:	d0f7      	beq.n	800241c <_printf_i+0xc4>
 800242c:	880b      	ldrh	r3, [r1, #0]
 800242e:	2a6f      	cmp	r2, #111	; 0x6f
 8002430:	bf14      	ite	ne
 8002432:	220a      	movne	r2, #10
 8002434:	2208      	moveq	r2, #8
 8002436:	4957      	ldr	r1, [pc, #348]	; (8002594 <_printf_i+0x23c>)
 8002438:	2000      	movs	r0, #0
 800243a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800243e:	6865      	ldr	r5, [r4, #4]
 8002440:	2d00      	cmp	r5, #0
 8002442:	60a5      	str	r5, [r4, #8]
 8002444:	f2c0 809c 	blt.w	8002580 <_printf_i+0x228>
 8002448:	6820      	ldr	r0, [r4, #0]
 800244a:	f020 0004 	bic.w	r0, r0, #4
 800244e:	6020      	str	r0, [r4, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d13f      	bne.n	80024d4 <_printf_i+0x17c>
 8002454:	2d00      	cmp	r5, #0
 8002456:	f040 8095 	bne.w	8002584 <_printf_i+0x22c>
 800245a:	4675      	mov	r5, lr
 800245c:	2a08      	cmp	r2, #8
 800245e:	d10b      	bne.n	8002478 <_printf_i+0x120>
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	07da      	lsls	r2, r3, #31
 8002464:	d508      	bpl.n	8002478 <_printf_i+0x120>
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	6862      	ldr	r2, [r4, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	bfde      	ittt	le
 800246e:	2330      	movle	r3, #48	; 0x30
 8002470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002478:	ebae 0305 	sub.w	r3, lr, r5
 800247c:	6123      	str	r3, [r4, #16]
 800247e:	f8cd 8000 	str.w	r8, [sp]
 8002482:	463b      	mov	r3, r7
 8002484:	aa03      	add	r2, sp, #12
 8002486:	4621      	mov	r1, r4
 8002488:	4630      	mov	r0, r6
 800248a:	f7ff feed 	bl	8002268 <_printf_common>
 800248e:	3001      	adds	r0, #1
 8002490:	d155      	bne.n	800253e <_printf_i+0x1e6>
 8002492:	f04f 30ff 	mov.w	r0, #4294967295
 8002496:	b005      	add	sp, #20
 8002498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800249c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80024a0:	493c      	ldr	r1, [pc, #240]	; (8002594 <_printf_i+0x23c>)
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80024aa:	f100 0504 	add.w	r5, r0, #4
 80024ae:	601d      	str	r5, [r3, #0]
 80024b0:	d001      	beq.n	80024b6 <_printf_i+0x15e>
 80024b2:	6803      	ldr	r3, [r0, #0]
 80024b4:	e002      	b.n	80024bc <_printf_i+0x164>
 80024b6:	0655      	lsls	r5, r2, #25
 80024b8:	d5fb      	bpl.n	80024b2 <_printf_i+0x15a>
 80024ba:	8803      	ldrh	r3, [r0, #0]
 80024bc:	07d0      	lsls	r0, r2, #31
 80024be:	bf44      	itt	mi
 80024c0:	f042 0220 	orrmi.w	r2, r2, #32
 80024c4:	6022      	strmi	r2, [r4, #0]
 80024c6:	b91b      	cbnz	r3, 80024d0 <_printf_i+0x178>
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	f022 0220 	bic.w	r2, r2, #32
 80024ce:	6022      	str	r2, [r4, #0]
 80024d0:	2210      	movs	r2, #16
 80024d2:	e7b1      	b.n	8002438 <_printf_i+0xe0>
 80024d4:	4675      	mov	r5, lr
 80024d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80024da:	fb02 3310 	mls	r3, r2, r0, r3
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80024e4:	4603      	mov	r3, r0
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d1f5      	bne.n	80024d6 <_printf_i+0x17e>
 80024ea:	e7b7      	b.n	800245c <_printf_i+0x104>
 80024ec:	6808      	ldr	r0, [r1, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80024f4:	6949      	ldr	r1, [r1, #20]
 80024f6:	d004      	beq.n	8002502 <_printf_i+0x1aa>
 80024f8:	1d10      	adds	r0, r2, #4
 80024fa:	6018      	str	r0, [r3, #0]
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	6019      	str	r1, [r3, #0]
 8002500:	e007      	b.n	8002512 <_printf_i+0x1ba>
 8002502:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002506:	f102 0004 	add.w	r0, r2, #4
 800250a:	6018      	str	r0, [r3, #0]
 800250c:	6813      	ldr	r3, [r2, #0]
 800250e:	d0f6      	beq.n	80024fe <_printf_i+0x1a6>
 8002510:	8019      	strh	r1, [r3, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	4675      	mov	r5, lr
 8002516:	6123      	str	r3, [r4, #16]
 8002518:	e7b1      	b.n	800247e <_printf_i+0x126>
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	1d11      	adds	r1, r2, #4
 800251e:	6019      	str	r1, [r3, #0]
 8002520:	6815      	ldr	r5, [r2, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	6862      	ldr	r2, [r4, #4]
 8002526:	4628      	mov	r0, r5
 8002528:	f000 fa94 	bl	8002a54 <memchr>
 800252c:	b108      	cbz	r0, 8002532 <_printf_i+0x1da>
 800252e:	1b40      	subs	r0, r0, r5
 8002530:	6060      	str	r0, [r4, #4]
 8002532:	6863      	ldr	r3, [r4, #4]
 8002534:	6123      	str	r3, [r4, #16]
 8002536:	2300      	movs	r3, #0
 8002538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800253c:	e79f      	b.n	800247e <_printf_i+0x126>
 800253e:	6923      	ldr	r3, [r4, #16]
 8002540:	462a      	mov	r2, r5
 8002542:	4639      	mov	r1, r7
 8002544:	4630      	mov	r0, r6
 8002546:	47c0      	blx	r8
 8002548:	3001      	adds	r0, #1
 800254a:	d0a2      	beq.n	8002492 <_printf_i+0x13a>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	079b      	lsls	r3, r3, #30
 8002550:	d507      	bpl.n	8002562 <_printf_i+0x20a>
 8002552:	2500      	movs	r5, #0
 8002554:	f104 0919 	add.w	r9, r4, #25
 8002558:	68e3      	ldr	r3, [r4, #12]
 800255a:	9a03      	ldr	r2, [sp, #12]
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	429d      	cmp	r5, r3
 8002560:	db05      	blt.n	800256e <_printf_i+0x216>
 8002562:	68e0      	ldr	r0, [r4, #12]
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	4298      	cmp	r0, r3
 8002568:	bfb8      	it	lt
 800256a:	4618      	movlt	r0, r3
 800256c:	e793      	b.n	8002496 <_printf_i+0x13e>
 800256e:	2301      	movs	r3, #1
 8002570:	464a      	mov	r2, r9
 8002572:	4639      	mov	r1, r7
 8002574:	4630      	mov	r0, r6
 8002576:	47c0      	blx	r8
 8002578:	3001      	adds	r0, #1
 800257a:	d08a      	beq.n	8002492 <_printf_i+0x13a>
 800257c:	3501      	adds	r5, #1
 800257e:	e7eb      	b.n	8002558 <_printf_i+0x200>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1a7      	bne.n	80024d4 <_printf_i+0x17c>
 8002584:	780b      	ldrb	r3, [r1, #0]
 8002586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800258a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800258e:	e765      	b.n	800245c <_printf_i+0x104>
 8002590:	08002cc6 	.word	0x08002cc6
 8002594:	08002cb5 	.word	0x08002cb5

08002598 <_sbrk_r>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	2300      	movs	r3, #0
 800259c:	4c05      	ldr	r4, [pc, #20]	; (80025b4 <_sbrk_r+0x1c>)
 800259e:	4605      	mov	r5, r0
 80025a0:	4608      	mov	r0, r1
 80025a2:	6023      	str	r3, [r4, #0]
 80025a4:	f000 fb0e 	bl	8002bc4 <_sbrk>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d102      	bne.n	80025b2 <_sbrk_r+0x1a>
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	b103      	cbz	r3, 80025b2 <_sbrk_r+0x1a>
 80025b0:	602b      	str	r3, [r5, #0]
 80025b2:	bd38      	pop	{r3, r4, r5, pc}
 80025b4:	200000e0 	.word	0x200000e0

080025b8 <__sread>:
 80025b8:	b510      	push	{r4, lr}
 80025ba:	460c      	mov	r4, r1
 80025bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c0:	f000 faa4 	bl	8002b0c <_read_r>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	bfab      	itete	ge
 80025c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025ca:	89a3      	ldrhlt	r3, [r4, #12]
 80025cc:	181b      	addge	r3, r3, r0
 80025ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025d2:	bfac      	ite	ge
 80025d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80025d6:	81a3      	strhlt	r3, [r4, #12]
 80025d8:	bd10      	pop	{r4, pc}

080025da <__swrite>:
 80025da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025de:	461f      	mov	r7, r3
 80025e0:	898b      	ldrh	r3, [r1, #12]
 80025e2:	4605      	mov	r5, r0
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	460c      	mov	r4, r1
 80025e8:	4616      	mov	r6, r2
 80025ea:	d505      	bpl.n	80025f8 <__swrite+0x1e>
 80025ec:	2302      	movs	r3, #2
 80025ee:	2200      	movs	r2, #0
 80025f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025f4:	f000 f9b8 	bl	8002968 <_lseek_r>
 80025f8:	89a3      	ldrh	r3, [r4, #12]
 80025fa:	4632      	mov	r2, r6
 80025fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002600:	81a3      	strh	r3, [r4, #12]
 8002602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002606:	463b      	mov	r3, r7
 8002608:	4628      	mov	r0, r5
 800260a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800260e:	f000 b869 	b.w	80026e4 <_write_r>

08002612 <__sseek>:
 8002612:	b510      	push	{r4, lr}
 8002614:	460c      	mov	r4, r1
 8002616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800261a:	f000 f9a5 	bl	8002968 <_lseek_r>
 800261e:	1c43      	adds	r3, r0, #1
 8002620:	89a3      	ldrh	r3, [r4, #12]
 8002622:	bf15      	itete	ne
 8002624:	6560      	strne	r0, [r4, #84]	; 0x54
 8002626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800262a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800262e:	81a3      	strheq	r3, [r4, #12]
 8002630:	bf18      	it	ne
 8002632:	81a3      	strhne	r3, [r4, #12]
 8002634:	bd10      	pop	{r4, pc}

08002636 <__sclose>:
 8002636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800263a:	f000 b8d3 	b.w	80027e4 <_close_r>
	...

08002640 <__swbuf_r>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	460e      	mov	r6, r1
 8002644:	4614      	mov	r4, r2
 8002646:	4605      	mov	r5, r0
 8002648:	b118      	cbz	r0, 8002652 <__swbuf_r+0x12>
 800264a:	6983      	ldr	r3, [r0, #24]
 800264c:	b90b      	cbnz	r3, 8002652 <__swbuf_r+0x12>
 800264e:	f7ff fbdd 	bl	8001e0c <__sinit>
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <__swbuf_r+0x98>)
 8002654:	429c      	cmp	r4, r3
 8002656:	d12a      	bne.n	80026ae <__swbuf_r+0x6e>
 8002658:	686c      	ldr	r4, [r5, #4]
 800265a:	69a3      	ldr	r3, [r4, #24]
 800265c:	60a3      	str	r3, [r4, #8]
 800265e:	89a3      	ldrh	r3, [r4, #12]
 8002660:	071a      	lsls	r2, r3, #28
 8002662:	d52e      	bpl.n	80026c2 <__swbuf_r+0x82>
 8002664:	6923      	ldr	r3, [r4, #16]
 8002666:	b363      	cbz	r3, 80026c2 <__swbuf_r+0x82>
 8002668:	6923      	ldr	r3, [r4, #16]
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	b2f6      	uxtb	r6, r6
 800266e:	1ac0      	subs	r0, r0, r3
 8002670:	6963      	ldr	r3, [r4, #20]
 8002672:	4637      	mov	r7, r6
 8002674:	4298      	cmp	r0, r3
 8002676:	db04      	blt.n	8002682 <__swbuf_r+0x42>
 8002678:	4621      	mov	r1, r4
 800267a:	4628      	mov	r0, r5
 800267c:	f000 f94a 	bl	8002914 <_fflush_r>
 8002680:	bb28      	cbnz	r0, 80026ce <__swbuf_r+0x8e>
 8002682:	68a3      	ldr	r3, [r4, #8]
 8002684:	3001      	adds	r0, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	60a3      	str	r3, [r4, #8]
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	6022      	str	r2, [r4, #0]
 8002690:	701e      	strb	r6, [r3, #0]
 8002692:	6963      	ldr	r3, [r4, #20]
 8002694:	4298      	cmp	r0, r3
 8002696:	d004      	beq.n	80026a2 <__swbuf_r+0x62>
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	07db      	lsls	r3, r3, #31
 800269c:	d519      	bpl.n	80026d2 <__swbuf_r+0x92>
 800269e:	2e0a      	cmp	r6, #10
 80026a0:	d117      	bne.n	80026d2 <__swbuf_r+0x92>
 80026a2:	4621      	mov	r1, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	f000 f935 	bl	8002914 <_fflush_r>
 80026aa:	b190      	cbz	r0, 80026d2 <__swbuf_r+0x92>
 80026ac:	e00f      	b.n	80026ce <__swbuf_r+0x8e>
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <__swbuf_r+0x9c>)
 80026b0:	429c      	cmp	r4, r3
 80026b2:	d101      	bne.n	80026b8 <__swbuf_r+0x78>
 80026b4:	68ac      	ldr	r4, [r5, #8]
 80026b6:	e7d0      	b.n	800265a <__swbuf_r+0x1a>
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <__swbuf_r+0xa0>)
 80026ba:	429c      	cmp	r4, r3
 80026bc:	bf08      	it	eq
 80026be:	68ec      	ldreq	r4, [r5, #12]
 80026c0:	e7cb      	b.n	800265a <__swbuf_r+0x1a>
 80026c2:	4621      	mov	r1, r4
 80026c4:	4628      	mov	r0, r5
 80026c6:	f000 f81f 	bl	8002708 <__swsetup_r>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d0cc      	beq.n	8002668 <__swbuf_r+0x28>
 80026ce:	f04f 37ff 	mov.w	r7, #4294967295
 80026d2:	4638      	mov	r0, r7
 80026d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08002c60 	.word	0x08002c60
 80026dc:	08002c80 	.word	0x08002c80
 80026e0:	08002c40 	.word	0x08002c40

080026e4 <_write_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4605      	mov	r5, r0
 80026e8:	4608      	mov	r0, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	2200      	movs	r2, #0
 80026ee:	4c05      	ldr	r4, [pc, #20]	; (8002704 <_write_r+0x20>)
 80026f0:	6022      	str	r2, [r4, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f7ff f8ae 	bl	8001854 <_write>
 80026f8:	1c43      	adds	r3, r0, #1
 80026fa:	d102      	bne.n	8002702 <_write_r+0x1e>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	b103      	cbz	r3, 8002702 <_write_r+0x1e>
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	bd38      	pop	{r3, r4, r5, pc}
 8002704:	200000e0 	.word	0x200000e0

08002708 <__swsetup_r>:
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <__swsetup_r+0xcc>)
 800270a:	b570      	push	{r4, r5, r6, lr}
 800270c:	681d      	ldr	r5, [r3, #0]
 800270e:	4606      	mov	r6, r0
 8002710:	460c      	mov	r4, r1
 8002712:	b125      	cbz	r5, 800271e <__swsetup_r+0x16>
 8002714:	69ab      	ldr	r3, [r5, #24]
 8002716:	b913      	cbnz	r3, 800271e <__swsetup_r+0x16>
 8002718:	4628      	mov	r0, r5
 800271a:	f7ff fb77 	bl	8001e0c <__sinit>
 800271e:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <__swsetup_r+0xd0>)
 8002720:	429c      	cmp	r4, r3
 8002722:	d10f      	bne.n	8002744 <__swsetup_r+0x3c>
 8002724:	686c      	ldr	r4, [r5, #4]
 8002726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800272a:	b29a      	uxth	r2, r3
 800272c:	0715      	lsls	r5, r2, #28
 800272e:	d42c      	bmi.n	800278a <__swsetup_r+0x82>
 8002730:	06d0      	lsls	r0, r2, #27
 8002732:	d411      	bmi.n	8002758 <__swsetup_r+0x50>
 8002734:	2209      	movs	r2, #9
 8002736:	6032      	str	r2, [r6, #0]
 8002738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	f04f 30ff 	mov.w	r0, #4294967295
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <__swsetup_r+0xd4>)
 8002746:	429c      	cmp	r4, r3
 8002748:	d101      	bne.n	800274e <__swsetup_r+0x46>
 800274a:	68ac      	ldr	r4, [r5, #8]
 800274c:	e7eb      	b.n	8002726 <__swsetup_r+0x1e>
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <__swsetup_r+0xd8>)
 8002750:	429c      	cmp	r4, r3
 8002752:	bf08      	it	eq
 8002754:	68ec      	ldreq	r4, [r5, #12]
 8002756:	e7e6      	b.n	8002726 <__swsetup_r+0x1e>
 8002758:	0751      	lsls	r1, r2, #29
 800275a:	d512      	bpl.n	8002782 <__swsetup_r+0x7a>
 800275c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800275e:	b141      	cbz	r1, 8002772 <__swsetup_r+0x6a>
 8002760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002764:	4299      	cmp	r1, r3
 8002766:	d002      	beq.n	800276e <__swsetup_r+0x66>
 8002768:	4630      	mov	r0, r6
 800276a:	f000 f983 	bl	8002a74 <_free_r>
 800276e:	2300      	movs	r3, #0
 8002770:	6363      	str	r3, [r4, #52]	; 0x34
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002778:	81a3      	strh	r3, [r4, #12]
 800277a:	2300      	movs	r3, #0
 800277c:	6063      	str	r3, [r4, #4]
 800277e:	6923      	ldr	r3, [r4, #16]
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	81a3      	strh	r3, [r4, #12]
 800278a:	6923      	ldr	r3, [r4, #16]
 800278c:	b94b      	cbnz	r3, 80027a2 <__swsetup_r+0x9a>
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d003      	beq.n	80027a2 <__swsetup_r+0x9a>
 800279a:	4621      	mov	r1, r4
 800279c:	4630      	mov	r0, r6
 800279e:	f000 f919 	bl	80029d4 <__smakebuf_r>
 80027a2:	89a2      	ldrh	r2, [r4, #12]
 80027a4:	f012 0301 	ands.w	r3, r2, #1
 80027a8:	d00c      	beq.n	80027c4 <__swsetup_r+0xbc>
 80027aa:	2300      	movs	r3, #0
 80027ac:	60a3      	str	r3, [r4, #8]
 80027ae:	6963      	ldr	r3, [r4, #20]
 80027b0:	425b      	negs	r3, r3
 80027b2:	61a3      	str	r3, [r4, #24]
 80027b4:	6923      	ldr	r3, [r4, #16]
 80027b6:	b953      	cbnz	r3, 80027ce <__swsetup_r+0xc6>
 80027b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80027c0:	d1ba      	bne.n	8002738 <__swsetup_r+0x30>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	0792      	lsls	r2, r2, #30
 80027c6:	bf58      	it	pl
 80027c8:	6963      	ldrpl	r3, [r4, #20]
 80027ca:	60a3      	str	r3, [r4, #8]
 80027cc:	e7f2      	b.n	80027b4 <__swsetup_r+0xac>
 80027ce:	2000      	movs	r0, #0
 80027d0:	e7f7      	b.n	80027c2 <__swsetup_r+0xba>
 80027d2:	bf00      	nop
 80027d4:	2000000c 	.word	0x2000000c
 80027d8:	08002c60 	.word	0x08002c60
 80027dc:	08002c80 	.word	0x08002c80
 80027e0:	08002c40 	.word	0x08002c40

080027e4 <_close_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	2300      	movs	r3, #0
 80027e8:	4c05      	ldr	r4, [pc, #20]	; (8002800 <_close_r+0x1c>)
 80027ea:	4605      	mov	r5, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	6023      	str	r3, [r4, #0]
 80027f0:	f000 f9c0 	bl	8002b74 <_close>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_close_r+0x1a>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_close_r+0x1a>
 80027fc:	602b      	str	r3, [r5, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	200000e0 	.word	0x200000e0

08002804 <__sflush_r>:
 8002804:	898a      	ldrh	r2, [r1, #12]
 8002806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280a:	4605      	mov	r5, r0
 800280c:	0710      	lsls	r0, r2, #28
 800280e:	460c      	mov	r4, r1
 8002810:	d45a      	bmi.n	80028c8 <__sflush_r+0xc4>
 8002812:	684b      	ldr	r3, [r1, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	dc05      	bgt.n	8002824 <__sflush_r+0x20>
 8002818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	dc02      	bgt.n	8002824 <__sflush_r+0x20>
 800281e:	2000      	movs	r0, #0
 8002820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002826:	2e00      	cmp	r6, #0
 8002828:	d0f9      	beq.n	800281e <__sflush_r+0x1a>
 800282a:	2300      	movs	r3, #0
 800282c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002830:	682f      	ldr	r7, [r5, #0]
 8002832:	602b      	str	r3, [r5, #0]
 8002834:	d033      	beq.n	800289e <__sflush_r+0x9a>
 8002836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002838:	89a3      	ldrh	r3, [r4, #12]
 800283a:	075a      	lsls	r2, r3, #29
 800283c:	d505      	bpl.n	800284a <__sflush_r+0x46>
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	1ac0      	subs	r0, r0, r3
 8002842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002844:	b10b      	cbz	r3, 800284a <__sflush_r+0x46>
 8002846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002848:	1ac0      	subs	r0, r0, r3
 800284a:	2300      	movs	r3, #0
 800284c:	4602      	mov	r2, r0
 800284e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002850:	6a21      	ldr	r1, [r4, #32]
 8002852:	4628      	mov	r0, r5
 8002854:	47b0      	blx	r6
 8002856:	1c43      	adds	r3, r0, #1
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	d106      	bne.n	800286a <__sflush_r+0x66>
 800285c:	6829      	ldr	r1, [r5, #0]
 800285e:	291d      	cmp	r1, #29
 8002860:	d84b      	bhi.n	80028fa <__sflush_r+0xf6>
 8002862:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <__sflush_r+0x10c>)
 8002864:	40ca      	lsrs	r2, r1
 8002866:	07d6      	lsls	r6, r2, #31
 8002868:	d547      	bpl.n	80028fa <__sflush_r+0xf6>
 800286a:	2200      	movs	r2, #0
 800286c:	6062      	str	r2, [r4, #4]
 800286e:	6922      	ldr	r2, [r4, #16]
 8002870:	04d9      	lsls	r1, r3, #19
 8002872:	6022      	str	r2, [r4, #0]
 8002874:	d504      	bpl.n	8002880 <__sflush_r+0x7c>
 8002876:	1c42      	adds	r2, r0, #1
 8002878:	d101      	bne.n	800287e <__sflush_r+0x7a>
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	b903      	cbnz	r3, 8002880 <__sflush_r+0x7c>
 800287e:	6560      	str	r0, [r4, #84]	; 0x54
 8002880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002882:	602f      	str	r7, [r5, #0]
 8002884:	2900      	cmp	r1, #0
 8002886:	d0ca      	beq.n	800281e <__sflush_r+0x1a>
 8002888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800288c:	4299      	cmp	r1, r3
 800288e:	d002      	beq.n	8002896 <__sflush_r+0x92>
 8002890:	4628      	mov	r0, r5
 8002892:	f000 f8ef 	bl	8002a74 <_free_r>
 8002896:	2000      	movs	r0, #0
 8002898:	6360      	str	r0, [r4, #52]	; 0x34
 800289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800289e:	6a21      	ldr	r1, [r4, #32]
 80028a0:	2301      	movs	r3, #1
 80028a2:	4628      	mov	r0, r5
 80028a4:	47b0      	blx	r6
 80028a6:	1c41      	adds	r1, r0, #1
 80028a8:	d1c6      	bne.n	8002838 <__sflush_r+0x34>
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0c3      	beq.n	8002838 <__sflush_r+0x34>
 80028b0:	2b1d      	cmp	r3, #29
 80028b2:	d001      	beq.n	80028b8 <__sflush_r+0xb4>
 80028b4:	2b16      	cmp	r3, #22
 80028b6:	d101      	bne.n	80028bc <__sflush_r+0xb8>
 80028b8:	602f      	str	r7, [r5, #0]
 80028ba:	e7b0      	b.n	800281e <__sflush_r+0x1a>
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c2:	81a3      	strh	r3, [r4, #12]
 80028c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028c8:	690f      	ldr	r7, [r1, #16]
 80028ca:	2f00      	cmp	r7, #0
 80028cc:	d0a7      	beq.n	800281e <__sflush_r+0x1a>
 80028ce:	0793      	lsls	r3, r2, #30
 80028d0:	bf18      	it	ne
 80028d2:	2300      	movne	r3, #0
 80028d4:	680e      	ldr	r6, [r1, #0]
 80028d6:	bf08      	it	eq
 80028d8:	694b      	ldreq	r3, [r1, #20]
 80028da:	eba6 0807 	sub.w	r8, r6, r7
 80028de:	600f      	str	r7, [r1, #0]
 80028e0:	608b      	str	r3, [r1, #8]
 80028e2:	f1b8 0f00 	cmp.w	r8, #0
 80028e6:	dd9a      	ble.n	800281e <__sflush_r+0x1a>
 80028e8:	4643      	mov	r3, r8
 80028ea:	463a      	mov	r2, r7
 80028ec:	6a21      	ldr	r1, [r4, #32]
 80028ee:	4628      	mov	r0, r5
 80028f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028f2:	47b0      	blx	r6
 80028f4:	2800      	cmp	r0, #0
 80028f6:	dc07      	bgt.n	8002908 <__sflush_r+0x104>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	81a3      	strh	r3, [r4, #12]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002908:	4407      	add	r7, r0
 800290a:	eba8 0800 	sub.w	r8, r8, r0
 800290e:	e7e8      	b.n	80028e2 <__sflush_r+0xde>
 8002910:	20400001 	.word	0x20400001

08002914 <_fflush_r>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	690b      	ldr	r3, [r1, #16]
 8002918:	4605      	mov	r5, r0
 800291a:	460c      	mov	r4, r1
 800291c:	b1db      	cbz	r3, 8002956 <_fflush_r+0x42>
 800291e:	b118      	cbz	r0, 8002928 <_fflush_r+0x14>
 8002920:	6983      	ldr	r3, [r0, #24]
 8002922:	b90b      	cbnz	r3, 8002928 <_fflush_r+0x14>
 8002924:	f7ff fa72 	bl	8001e0c <__sinit>
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <_fflush_r+0x48>)
 800292a:	429c      	cmp	r4, r3
 800292c:	d109      	bne.n	8002942 <_fflush_r+0x2e>
 800292e:	686c      	ldr	r4, [r5, #4]
 8002930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002934:	b17b      	cbz	r3, 8002956 <_fflush_r+0x42>
 8002936:	4621      	mov	r1, r4
 8002938:	4628      	mov	r0, r5
 800293a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800293e:	f7ff bf61 	b.w	8002804 <__sflush_r>
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <_fflush_r+0x4c>)
 8002944:	429c      	cmp	r4, r3
 8002946:	d101      	bne.n	800294c <_fflush_r+0x38>
 8002948:	68ac      	ldr	r4, [r5, #8]
 800294a:	e7f1      	b.n	8002930 <_fflush_r+0x1c>
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <_fflush_r+0x50>)
 800294e:	429c      	cmp	r4, r3
 8002950:	bf08      	it	eq
 8002952:	68ec      	ldreq	r4, [r5, #12]
 8002954:	e7ec      	b.n	8002930 <_fflush_r+0x1c>
 8002956:	2000      	movs	r0, #0
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	08002c60 	.word	0x08002c60
 8002960:	08002c80 	.word	0x08002c80
 8002964:	08002c40 	.word	0x08002c40

08002968 <_lseek_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4605      	mov	r5, r0
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	2200      	movs	r2, #0
 8002972:	4c05      	ldr	r4, [pc, #20]	; (8002988 <_lseek_r+0x20>)
 8002974:	6022      	str	r2, [r4, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f000 f914 	bl	8002ba4 <_lseek>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	d102      	bne.n	8002986 <_lseek_r+0x1e>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	b103      	cbz	r3, 8002986 <_lseek_r+0x1e>
 8002984:	602b      	str	r3, [r5, #0]
 8002986:	bd38      	pop	{r3, r4, r5, pc}
 8002988:	200000e0 	.word	0x200000e0

0800298c <__swhatbuf_r>:
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	460e      	mov	r6, r1
 8002990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002994:	b090      	sub	sp, #64	; 0x40
 8002996:	2900      	cmp	r1, #0
 8002998:	4614      	mov	r4, r2
 800299a:	461d      	mov	r5, r3
 800299c:	da07      	bge.n	80029ae <__swhatbuf_r+0x22>
 800299e:	2300      	movs	r3, #0
 80029a0:	602b      	str	r3, [r5, #0]
 80029a2:	89b3      	ldrh	r3, [r6, #12]
 80029a4:	061a      	lsls	r2, r3, #24
 80029a6:	d410      	bmi.n	80029ca <__swhatbuf_r+0x3e>
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	e00e      	b.n	80029cc <__swhatbuf_r+0x40>
 80029ae:	aa01      	add	r2, sp, #4
 80029b0:	f000 f8be 	bl	8002b30 <_fstat_r>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	dbf2      	blt.n	800299e <__swhatbuf_r+0x12>
 80029b8:	9a02      	ldr	r2, [sp, #8]
 80029ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029c2:	425a      	negs	r2, r3
 80029c4:	415a      	adcs	r2, r3
 80029c6:	602a      	str	r2, [r5, #0]
 80029c8:	e7ee      	b.n	80029a8 <__swhatbuf_r+0x1c>
 80029ca:	2340      	movs	r3, #64	; 0x40
 80029cc:	2000      	movs	r0, #0
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	b010      	add	sp, #64	; 0x40
 80029d2:	bd70      	pop	{r4, r5, r6, pc}

080029d4 <__smakebuf_r>:
 80029d4:	898b      	ldrh	r3, [r1, #12]
 80029d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029d8:	079d      	lsls	r5, r3, #30
 80029da:	4606      	mov	r6, r0
 80029dc:	460c      	mov	r4, r1
 80029de:	d507      	bpl.n	80029f0 <__smakebuf_r+0x1c>
 80029e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	6123      	str	r3, [r4, #16]
 80029e8:	2301      	movs	r3, #1
 80029ea:	6163      	str	r3, [r4, #20]
 80029ec:	b002      	add	sp, #8
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	ab01      	add	r3, sp, #4
 80029f2:	466a      	mov	r2, sp
 80029f4:	f7ff ffca 	bl	800298c <__swhatbuf_r>
 80029f8:	9900      	ldr	r1, [sp, #0]
 80029fa:	4605      	mov	r5, r0
 80029fc:	4630      	mov	r0, r6
 80029fe:	f7ff fa97 	bl	8001f30 <_malloc_r>
 8002a02:	b948      	cbnz	r0, 8002a18 <__smakebuf_r+0x44>
 8002a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a08:	059a      	lsls	r2, r3, #22
 8002a0a:	d4ef      	bmi.n	80029ec <__smakebuf_r+0x18>
 8002a0c:	f023 0303 	bic.w	r3, r3, #3
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	81a3      	strh	r3, [r4, #12]
 8002a16:	e7e3      	b.n	80029e0 <__smakebuf_r+0xc>
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <__smakebuf_r+0x7c>)
 8002a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	6020      	str	r0, [r4, #0]
 8002a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a24:	81a3      	strh	r3, [r4, #12]
 8002a26:	9b00      	ldr	r3, [sp, #0]
 8002a28:	6120      	str	r0, [r4, #16]
 8002a2a:	6163      	str	r3, [r4, #20]
 8002a2c:	9b01      	ldr	r3, [sp, #4]
 8002a2e:	b15b      	cbz	r3, 8002a48 <__smakebuf_r+0x74>
 8002a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a34:	4630      	mov	r0, r6
 8002a36:	f000 f88d 	bl	8002b54 <_isatty_r>
 8002a3a:	b128      	cbz	r0, 8002a48 <__smakebuf_r+0x74>
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	81a3      	strh	r3, [r4, #12]
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	431d      	orrs	r5, r3
 8002a4c:	81a5      	strh	r5, [r4, #12]
 8002a4e:	e7cd      	b.n	80029ec <__smakebuf_r+0x18>
 8002a50:	08001d8d 	.word	0x08001d8d

08002a54 <memchr>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	b2c9      	uxtb	r1, r1
 8002a58:	4402      	add	r2, r0
 8002a5a:	4290      	cmp	r0, r2
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	d101      	bne.n	8002a64 <memchr+0x10>
 8002a60:	2000      	movs	r0, #0
 8002a62:	bd10      	pop	{r4, pc}
 8002a64:	781c      	ldrb	r4, [r3, #0]
 8002a66:	3001      	adds	r0, #1
 8002a68:	428c      	cmp	r4, r1
 8002a6a:	d1f6      	bne.n	8002a5a <memchr+0x6>
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <__malloc_lock>:
 8002a70:	4770      	bx	lr

08002a72 <__malloc_unlock>:
 8002a72:	4770      	bx	lr

08002a74 <_free_r>:
 8002a74:	b538      	push	{r3, r4, r5, lr}
 8002a76:	4605      	mov	r5, r0
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	d043      	beq.n	8002b04 <_free_r+0x90>
 8002a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a80:	1f0c      	subs	r4, r1, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bfb8      	it	lt
 8002a86:	18e4      	addlt	r4, r4, r3
 8002a88:	f7ff fff2 	bl	8002a70 <__malloc_lock>
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <_free_r+0x94>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	4610      	mov	r0, r2
 8002a92:	b933      	cbnz	r3, 8002aa2 <_free_r+0x2e>
 8002a94:	6063      	str	r3, [r4, #4]
 8002a96:	6014      	str	r4, [r2, #0]
 8002a98:	4628      	mov	r0, r5
 8002a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a9e:	f7ff bfe8 	b.w	8002a72 <__malloc_unlock>
 8002aa2:	42a3      	cmp	r3, r4
 8002aa4:	d90b      	bls.n	8002abe <_free_r+0x4a>
 8002aa6:	6821      	ldr	r1, [r4, #0]
 8002aa8:	1862      	adds	r2, r4, r1
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	bf01      	itttt	eq
 8002aae:	681a      	ldreq	r2, [r3, #0]
 8002ab0:	685b      	ldreq	r3, [r3, #4]
 8002ab2:	1852      	addeq	r2, r2, r1
 8002ab4:	6022      	streq	r2, [r4, #0]
 8002ab6:	6063      	str	r3, [r4, #4]
 8002ab8:	6004      	str	r4, [r0, #0]
 8002aba:	e7ed      	b.n	8002a98 <_free_r+0x24>
 8002abc:	4613      	mov	r3, r2
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	b10a      	cbz	r2, 8002ac6 <_free_r+0x52>
 8002ac2:	42a2      	cmp	r2, r4
 8002ac4:	d9fa      	bls.n	8002abc <_free_r+0x48>
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	1858      	adds	r0, r3, r1
 8002aca:	42a0      	cmp	r0, r4
 8002acc:	d10b      	bne.n	8002ae6 <_free_r+0x72>
 8002ace:	6820      	ldr	r0, [r4, #0]
 8002ad0:	4401      	add	r1, r0
 8002ad2:	1858      	adds	r0, r3, r1
 8002ad4:	4282      	cmp	r2, r0
 8002ad6:	6019      	str	r1, [r3, #0]
 8002ad8:	d1de      	bne.n	8002a98 <_free_r+0x24>
 8002ada:	6810      	ldr	r0, [r2, #0]
 8002adc:	6852      	ldr	r2, [r2, #4]
 8002ade:	4401      	add	r1, r0
 8002ae0:	6019      	str	r1, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e7d8      	b.n	8002a98 <_free_r+0x24>
 8002ae6:	d902      	bls.n	8002aee <_free_r+0x7a>
 8002ae8:	230c      	movs	r3, #12
 8002aea:	602b      	str	r3, [r5, #0]
 8002aec:	e7d4      	b.n	8002a98 <_free_r+0x24>
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	1821      	adds	r1, r4, r0
 8002af2:	428a      	cmp	r2, r1
 8002af4:	bf01      	itttt	eq
 8002af6:	6811      	ldreq	r1, [r2, #0]
 8002af8:	6852      	ldreq	r2, [r2, #4]
 8002afa:	1809      	addeq	r1, r1, r0
 8002afc:	6021      	streq	r1, [r4, #0]
 8002afe:	6062      	str	r2, [r4, #4]
 8002b00:	605c      	str	r4, [r3, #4]
 8002b02:	e7c9      	b.n	8002a98 <_free_r+0x24>
 8002b04:	bd38      	pop	{r3, r4, r5, pc}
 8002b06:	bf00      	nop
 8002b08:	20000090 	.word	0x20000090

08002b0c <_read_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4605      	mov	r5, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	2200      	movs	r2, #0
 8002b16:	4c05      	ldr	r4, [pc, #20]	; (8002b2c <_read_r+0x20>)
 8002b18:	6022      	str	r2, [r4, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f000 f84a 	bl	8002bb4 <_read>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d102      	bne.n	8002b2a <_read_r+0x1e>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	b103      	cbz	r3, 8002b2a <_read_r+0x1e>
 8002b28:	602b      	str	r3, [r5, #0]
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	200000e0 	.word	0x200000e0

08002b30 <_fstat_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	2300      	movs	r3, #0
 8002b34:	4c06      	ldr	r4, [pc, #24]	; (8002b50 <_fstat_r+0x20>)
 8002b36:	4605      	mov	r5, r0
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	f000 f821 	bl	8002b84 <_fstat>
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	d102      	bne.n	8002b4c <_fstat_r+0x1c>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	b103      	cbz	r3, 8002b4c <_fstat_r+0x1c>
 8002b4a:	602b      	str	r3, [r5, #0]
 8002b4c:	bd38      	pop	{r3, r4, r5, pc}
 8002b4e:	bf00      	nop
 8002b50:	200000e0 	.word	0x200000e0

08002b54 <_isatty_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	2300      	movs	r3, #0
 8002b58:	4c05      	ldr	r4, [pc, #20]	; (8002b70 <_isatty_r+0x1c>)
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	f000 f818 	bl	8002b94 <_isatty>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d102      	bne.n	8002b6e <_isatty_r+0x1a>
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	b103      	cbz	r3, 8002b6e <_isatty_r+0x1a>
 8002b6c:	602b      	str	r3, [r5, #0]
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	200000e0 	.word	0x200000e0

08002b74 <_close>:
 8002b74:	2258      	movs	r2, #88	; 0x58
 8002b76:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <_close+0xc>)
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	4770      	bx	lr
 8002b80:	200000e0 	.word	0x200000e0

08002b84 <_fstat>:
 8002b84:	2258      	movs	r2, #88	; 0x58
 8002b86:	4b02      	ldr	r3, [pc, #8]	; (8002b90 <_fstat+0xc>)
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	4770      	bx	lr
 8002b90:	200000e0 	.word	0x200000e0

08002b94 <_isatty>:
 8002b94:	2258      	movs	r2, #88	; 0x58
 8002b96:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <_isatty+0xc>)
 8002b98:	2000      	movs	r0, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200000e0 	.word	0x200000e0

08002ba4 <_lseek>:
 8002ba4:	2258      	movs	r2, #88	; 0x58
 8002ba6:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <_lseek+0xc>)
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	4770      	bx	lr
 8002bb0:	200000e0 	.word	0x200000e0

08002bb4 <_read>:
 8002bb4:	2258      	movs	r2, #88	; 0x58
 8002bb6:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <_read+0xc>)
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	4770      	bx	lr
 8002bc0:	200000e0 	.word	0x200000e0

08002bc4 <_sbrk>:
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <_sbrk+0x14>)
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	b909      	cbnz	r1, 8002bd0 <_sbrk+0xc>
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <_sbrk+0x18>)
 8002bce:	6019      	str	r1, [r3, #0]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	4402      	add	r2, r0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	4770      	bx	lr
 8002bd8:	20000098 	.word	0x20000098
 8002bdc:	200000e4 	.word	0x200000e4

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
